{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"ADDING_LICENSE/","text":"Adding License Headers License Header Use the following header for all newly created source files: SORMAS\u00ae - Surveillance Outbreak Response Management & Analysis System Copyright \u00a9 2016-2020 Helmholtz-Zentrum f\u00fcr Infektionsforschung GmbH (HZI) This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Eclipse Use eclipse's Releng tool to automatically add license headers to all relevant source files (see https://www.codejava.net/ides/eclipse/how-to-add-copyright-license-header-for-java-source-files-in-eclipse for a usage guide) After installing the tool from the marketplace, open Window > Preferences > Copyright Tool and paste the license header from above into the template text area Make sure to select \"Replace all existing copyright comments with this copyright template\" and especially \"Skip over XML files\" (to make sure that headers don't get added to e.g. build files) Whenever you create a new source file: Right click on the file and select \"Fix Copyrights\" Android Studio/IntelliJ Open File > Settings > Editor > Copyright > Copyright Profiles Create a new profile and paste the license header from above into the Copyright text area Head back to the general Copyright settings and select the new copyright profile as the \"Default project copyright\" (Optional: If the year has changed, right click on all projects containing manual code and select \"Update Copyright...\", select \"Custom Scope\" and in the dropdown, select \"Project Source Files\"; Click \"Ok\" and wait until the copyright has been added to/changed for all files) Android Studio automatically adds the copyright to newly created files afterwards","title":"License"},{"location":"ADDING_LICENSE/#adding-license-headers","text":"","title":"Adding License Headers"},{"location":"ADDING_LICENSE/#license-header","text":"Use the following header for all newly created source files: SORMAS\u00ae - Surveillance Outbreak Response Management & Analysis System Copyright \u00a9 2016-2020 Helmholtz-Zentrum f\u00fcr Infektionsforschung GmbH (HZI) This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.","title":"License Header"},{"location":"ADDING_LICENSE/#eclipse","text":"Use eclipse's Releng tool to automatically add license headers to all relevant source files (see https://www.codejava.net/ides/eclipse/how-to-add-copyright-license-header-for-java-source-files-in-eclipse for a usage guide) After installing the tool from the marketplace, open Window > Preferences > Copyright Tool and paste the license header from above into the template text area Make sure to select \"Replace all existing copyright comments with this copyright template\" and especially \"Skip over XML files\" (to make sure that headers don't get added to e.g. build files) Whenever you create a new source file: Right click on the file and select \"Fix Copyrights\"","title":"Eclipse"},{"location":"ADDING_LICENSE/#android-studiointellij","text":"Open File > Settings > Editor > Copyright > Copyright Profiles Create a new profile and paste the license header from above into the Copyright text area Head back to the general Copyright settings and select the new copyright profile as the \"Default project copyright\" (Optional: If the year has changed, right click on all projects containing manual code and select \"Update Copyright...\", select \"Custom Scope\" and in the dropdown, select \"Project Source Files\"; Click \"Ok\" and wait until the copyright has been added to/changed for all files) Android Studio automatically adds the copyright to newly created files afterwards","title":"Android Studio/IntelliJ"},{"location":"DEMO_APP/","text":"Creating a demo app for a SORMAS demo server Important : This only applies if you have setup your own SORMAS server for demo purposes and and want to give users easy access to it. Step 1: Adjust the sormas-app.properties Open the the apk file from the SORMAS release with a zip editor (e.g. 7zip). Extract sormas-app.properties and open the the file for editing. Set server.url.default to the URL of your SORMAS server's ReST interface. Set user.name.default and user.password.default to the demo user (needs to be an informant or officer). Overwrite the sormas-app.properties in the apk with your changed version. Step 2: Sign the changed apk file Since the apk file has been changed it needs to be signed again.\\ Important : When you change and sign the apk file it is no longer compatible with the original apk file for automatic app update! If you still want to make this work you always have to sign new versions using the same keystore and put the changed apk-file into your SORMAS server for automatic app update.\\ Create a keystore using keytool: keytool -genkey -v -keystore my-demo-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-alias Note: keytool is located in the bin/ directory in your JDK. To locate your JDK from Android Studio, select File > Project Structure, and then click SDK Location and you will see the JDK location. Download uber-apk-signer: https://github.com/patrickfav/uber-apk-signer/releases. Note: this is the convenient way to do it. You can also get an Android SDK and follow the instructions given here: https://developer.android.com/studio/publish/app-signing#signing-manually Sign the apk file: java -jar uber-apk-signer.jar --ks my-demo-key.jks -ksAlias my-alias --alowResign --apks sormas-version-demo.apk See also: https://github.com/patrickfav/uber-apk-signer#command-line-interface","title":"Creating a demo app for a SORMAS demo server"},{"location":"DEMO_APP/#creating-a-demo-app-for-a-sormas-demo-server","text":"Important : This only applies if you have setup your own SORMAS server for demo purposes and and want to give users easy access to it.","title":"Creating a demo app for a SORMAS demo server"},{"location":"DEMO_APP/#step-1-adjust-the-sormas-appproperties","text":"Open the the apk file from the SORMAS release with a zip editor (e.g. 7zip). Extract sormas-app.properties and open the the file for editing. Set server.url.default to the URL of your SORMAS server's ReST interface. Set user.name.default and user.password.default to the demo user (needs to be an informant or officer). Overwrite the sormas-app.properties in the apk with your changed version.","title":"Step 1: Adjust the sormas-app.properties"},{"location":"DEMO_APP/#step-2-sign-the-changed-apk-file","text":"Since the apk file has been changed it needs to be signed again.\\ Important : When you change and sign the apk file it is no longer compatible with the original apk file for automatic app update! If you still want to make this work you always have to sign new versions using the same keystore and put the changed apk-file into your SORMAS server for automatic app update.\\ Create a keystore using keytool: keytool -genkey -v -keystore my-demo-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-alias Note: keytool is located in the bin/ directory in your JDK. To locate your JDK from Android Studio, select File > Project Structure, and then click SDK Location and you will see the JDK location. Download uber-apk-signer: https://github.com/patrickfav/uber-apk-signer/releases. Note: this is the convenient way to do it. You can also get an Android SDK and follow the instructions given here: https://developer.android.com/studio/publish/app-signing#signing-manually Sign the apk file: java -jar uber-apk-signer.jar --ks my-demo-key.jks -ksAlias my-alias --alowResign --apks sormas-version-demo.apk See also: https://github.com/patrickfav/uber-apk-signer#command-line-interface","title":"Step 2: Sign the changed apk file"},{"location":"DEVELOPMENT_ENVIRONMENT/","text":"SORMAS Development Environment Server Install your local server . Alternatively SERVER_DEV_SETUP.md could be used (at this time not recommended) Git Install Git for your OS Recommended: Install a Git client such as TortoiseGit if you don't want to handle version control from the command line or separately for the Eclipse and Android Studio projects Open the Git Bash and execute the command git config --global branch.development.rebase true (which ensures that rebase is used when pulling rather than merge) Java Download and install the Java 11 JDK (not JRE) for your operating system. We suggest to use Zulu OpenJDK: https://www.azul.com/downloads/zulu/ Linux : https://docs.azul.com/zulu/zuludocs/#ZuluUserGuide/PrepareZuluPlatform/AttachAPTRepositoryUbuntuOrDebianSys.htm sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9 sudo apt-add-repository 'deb https://repos.azul.com/zulu/deb/ stable main' sudo apt-get update sudo apt-get install zulu11 Windows : For testing and development environments we suggest to download and run the installer of the Java 11 JDK for 32 or 64 bit client systems (depending on your system). Eclipse Install the latest Eclipse version Set the default JRE of Eclipse to the installed Zulu Java SDK: Assigning the default JRE for the workbench Clone the SORMAS-Open repository and import the projects to Eclipse If you're using Eclipse to clone, choose \"File -> Import -> Git -> Projects from Git\" and continue until you're asked to create a new project from the cloned repository; click cancel instead and use \"File -> Import -> Maven -> Existing Maven Projects\" to import the separate projects into your workspace If you've cloned the repository from the command line or a Git client, you obviously only need to perform the last step Install Payara Tools Install the Vaadin Plugin for Eclipse (no need to install the commercial UI designer) Add a Payara server to Eclipse and enter the credentials you specified when setting up the server Configure automatic code formatting (\"Window -> Preferences\"): Go to \"Java -> Code Style -> Formatter\", import sormas-base/java-formatter-profile.xml and apply. Go to \"Java -> Code Style -> Organize Imports\", import sormas-base/java-importorder-profile.importorder , \"Number of imports needed for . \" = 99 , \"Number of static imports needed for . \" = 99 , \"Do not create import for types starting with a lowercase letter\" = checked and apply. Go to \"Java -> Editor -> Save Actions\", activate \"Perform the selected actions on save\", \"Format source code\" with \"Format all lines\", \"Organize imports\" and apply. Additional Steps Make a copy of \"build.properties.example\" contained in \"sormas-base\", rename it to \"build.properties\" and set \"glassfish.domain.root\" to the location of the sormas domain located in the \"glassfish/domains\" folder inside your payara installation Drag the \"build.xml\" file contained in \"sormas-base\" into the Ant view in Eclipse Either: Run \"Maven install\" on the sormas-base project Or: Execute the \"install [default]\" ant script (this needs a maven installation on your system with the M2_HOME variable set) Then: Execute the \"deploy-serverlibs\" ant script Highlight all Eclipse projects and choose \"Maven -> Update Project\" from the right click menu; perform the update for all projects Start the Glassfish server and deploy \"sormas-ear\", \"sormas-rest\" and \"sormas-ui\" by dragging the respective projects onto it, or use the \"Add and Remove...\"-function by right clicking on the server. Open your browser and type in \"http://localhost:6080/sormas-ui\" or \"https://localhost:6081/sormas-ui\" to test whether everything has been set up correctly (and to use the application) IntelliJ Install the latest Ultimate edition IntelliJ Set the project SDK to use the installed Zulu Java 8 SDK Clone the SORMAS-Project repository and open the project in IntelliJ make sure the under \"File -> Project Structure -> Modules\" all the modules (except the android app - this should not be added) are recognized, if not add the modules with + Make sure under \"File -> Settings -> Plugins\" Glassfish & Ant integrations are enabled (look into the \"Installed\" tab) Install the Vaadin Designer plugin Make a copy of \"build.properties.example\" contained in \"sormas-base\", rename it to \"build.properties\" and set \"glassfish.domain.root\" to the location of the sormas domain located in the \"glassfish/domains\" folder inside your payara installation Run \"Maven install\" on the sormas-base project Add a Payara server to IntelliJ: go to \"Run -> Edit configurations\" add new configuration and choose from the templates Glassfish server select the payara5 directory for application server - and name the application server field Payara5 specify server domain and credentials from the server setup add \"http://localhost:6080/sormas-ui\" under open browser section and check After launch checkbox under Deployment tab add the artifacts \"sormas-ear\", \"sormas-rest\" and \"sormas-ui\" under Logs tab add new log with location pointing to the domain log (e.g.: payara5\\glassfish\\domains\\sormas\\logs\\server.log) under Startup/Connection tab make sure you do not pass environment variables (it's a currently open bug in intellij) - ignore warning about debug config not being correct edit your domain config ..\\payara5\\glassfish\\domains\\sormas\\config\\domain.xml and make sure the java-config node contains: <java-config classpath-suffix=\"\" debug-enabled=\"true\" debug-options=\"-agentlib:jdwp=transport=dt_socket,address=6009,server=n,suspend=y\" ... Open the Ant window, click on the \"+\" icon and select the build.xml file from the sormas-base project Execute the \"install\" and \"deploy-serverlibs\" scripts in this order Set the default working directory for run configurations: Run -> Edit Configurations -> Templates -> Application -> set the value for Working directory to $MODULE_WORKING_DIR$ Configure code formatting: install Eclipse Code Formatter for IntelliJ (https://plugins.jetbrains.com/plugin/6546-eclipse-code-formatter) open the plugin settings (Other Settings -> Eclipse Code Formatter) and select \"Use the Eclipse Code Formatter\" under \"Eclipse Formatter config file\", select sormas-base/java-formatter-profile.xml check optimize imports and, for \"Import order\", select sormas-base/java-importorder-profile.importorder Important: select \"Do not format other file types by IntelliJ formatter\" go to Preferences -> Editor -> Code style -> Java -> Imports: set class and static names counts for import with * to 99 for IntelliJ, code formatting is usually done with Ctrl+Alt+L. For automatic formatting, it's recommended to use the plugin Save Actions (https://plugins.jetbrains.com/plugin/7642-save-actions) Android Studio Note: This is only needed for development of the SORMAS Android app * Install the latest Android Studio version (to avoid errors, start the installation with admin rights) * Start the application * To avoid errors, ensure that the path for the Android SDK contains no whitespaces * The path could be edited at Tools -> SDK Manager -> Android SDK Location * Open Android Studio and import the \"sormas-app\" module from SORMAS-Project * Create a keystore.properties file in sormas-app (see keystore.properties.example for reference - needed only for app deployment). * Build the Android Studio project by executing the gradle build (this may be done automatically) * Add an emulator with SDK version between the minSdkVersion and targetSdkVersion properties from build.gradle * On first start of the application enter the Sormas rest service URL for the server URL: http://10.0.2.2:6080/sormas-rest/ (see: https://developer.android.com/studio/run/emulator-networking) * Configure code formatting: - install Eclipse Code Formatter for Android studio (https://plugins.jetbrains.com/plugin/6546-eclipse-code-formatter) - open the plugin settings (Other Settings -> Eclipse Code Formatter) and select \"Use the Eclipse Code Formatter\" - under \"Eclipse Formatter config file\", select sormas-base/java-formatter-profile.xml - check optimize imports and, for \"Iport order\", select sormas-base/java-importorder-profile.importorder - Important:** select \"Do not format other file types by IntelliJ formatter\" - go to Preferences -> Editor -> Code style -> Java : set class and static names counts for import with * to 99 - for Android Studio, code formatting is usually done with Ctrl+Alt+L. For automatic formatting, it's recommended to use the plugin Save Actions (https://plugins.jetbrains.com/plugin/7642-save-actions)","title":"Automated Setup"},{"location":"DEVELOPMENT_ENVIRONMENT/#sormas-development-environment","text":"","title":"SORMAS Development Environment"},{"location":"DEVELOPMENT_ENVIRONMENT/#server","text":"Install your local server . Alternatively SERVER_DEV_SETUP.md could be used (at this time not recommended)","title":"Server"},{"location":"DEVELOPMENT_ENVIRONMENT/#git","text":"Install Git for your OS Recommended: Install a Git client such as TortoiseGit if you don't want to handle version control from the command line or separately for the Eclipse and Android Studio projects Open the Git Bash and execute the command git config --global branch.development.rebase true (which ensures that rebase is used when pulling rather than merge)","title":"Git"},{"location":"DEVELOPMENT_ENVIRONMENT/#java","text":"Download and install the Java 11 JDK (not JRE) for your operating system. We suggest to use Zulu OpenJDK: https://www.azul.com/downloads/zulu/ Linux : https://docs.azul.com/zulu/zuludocs/#ZuluUserGuide/PrepareZuluPlatform/AttachAPTRepositoryUbuntuOrDebianSys.htm sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9 sudo apt-add-repository 'deb https://repos.azul.com/zulu/deb/ stable main' sudo apt-get update sudo apt-get install zulu11 Windows : For testing and development environments we suggest to download and run the installer of the Java 11 JDK for 32 or 64 bit client systems (depending on your system).","title":"Java"},{"location":"DEVELOPMENT_ENVIRONMENT/#eclipse","text":"Install the latest Eclipse version Set the default JRE of Eclipse to the installed Zulu Java SDK: Assigning the default JRE for the workbench Clone the SORMAS-Open repository and import the projects to Eclipse If you're using Eclipse to clone, choose \"File -> Import -> Git -> Projects from Git\" and continue until you're asked to create a new project from the cloned repository; click cancel instead and use \"File -> Import -> Maven -> Existing Maven Projects\" to import the separate projects into your workspace If you've cloned the repository from the command line or a Git client, you obviously only need to perform the last step Install Payara Tools Install the Vaadin Plugin for Eclipse (no need to install the commercial UI designer) Add a Payara server to Eclipse and enter the credentials you specified when setting up the server Configure automatic code formatting (\"Window -> Preferences\"): Go to \"Java -> Code Style -> Formatter\", import sormas-base/java-formatter-profile.xml and apply. Go to \"Java -> Code Style -> Organize Imports\", import sormas-base/java-importorder-profile.importorder , \"Number of imports needed for . \" = 99 , \"Number of static imports needed for . \" = 99 , \"Do not create import for types starting with a lowercase letter\" = checked and apply. Go to \"Java -> Editor -> Save Actions\", activate \"Perform the selected actions on save\", \"Format source code\" with \"Format all lines\", \"Organize imports\" and apply.","title":"Eclipse"},{"location":"DEVELOPMENT_ENVIRONMENT/#additional-steps","text":"Make a copy of \"build.properties.example\" contained in \"sormas-base\", rename it to \"build.properties\" and set \"glassfish.domain.root\" to the location of the sormas domain located in the \"glassfish/domains\" folder inside your payara installation Drag the \"build.xml\" file contained in \"sormas-base\" into the Ant view in Eclipse Either: Run \"Maven install\" on the sormas-base project Or: Execute the \"install [default]\" ant script (this needs a maven installation on your system with the M2_HOME variable set) Then: Execute the \"deploy-serverlibs\" ant script Highlight all Eclipse projects and choose \"Maven -> Update Project\" from the right click menu; perform the update for all projects Start the Glassfish server and deploy \"sormas-ear\", \"sormas-rest\" and \"sormas-ui\" by dragging the respective projects onto it, or use the \"Add and Remove...\"-function by right clicking on the server. Open your browser and type in \"http://localhost:6080/sormas-ui\" or \"https://localhost:6081/sormas-ui\" to test whether everything has been set up correctly (and to use the application)","title":"Additional Steps"},{"location":"DEVELOPMENT_ENVIRONMENT/#intellij","text":"Install the latest Ultimate edition IntelliJ Set the project SDK to use the installed Zulu Java 8 SDK Clone the SORMAS-Project repository and open the project in IntelliJ make sure the under \"File -> Project Structure -> Modules\" all the modules (except the android app - this should not be added) are recognized, if not add the modules with + Make sure under \"File -> Settings -> Plugins\" Glassfish & Ant integrations are enabled (look into the \"Installed\" tab) Install the Vaadin Designer plugin Make a copy of \"build.properties.example\" contained in \"sormas-base\", rename it to \"build.properties\" and set \"glassfish.domain.root\" to the location of the sormas domain located in the \"glassfish/domains\" folder inside your payara installation Run \"Maven install\" on the sormas-base project Add a Payara server to IntelliJ: go to \"Run -> Edit configurations\" add new configuration and choose from the templates Glassfish server select the payara5 directory for application server - and name the application server field Payara5 specify server domain and credentials from the server setup add \"http://localhost:6080/sormas-ui\" under open browser section and check After launch checkbox under Deployment tab add the artifacts \"sormas-ear\", \"sormas-rest\" and \"sormas-ui\" under Logs tab add new log with location pointing to the domain log (e.g.: payara5\\glassfish\\domains\\sormas\\logs\\server.log) under Startup/Connection tab make sure you do not pass environment variables (it's a currently open bug in intellij) - ignore warning about debug config not being correct edit your domain config ..\\payara5\\glassfish\\domains\\sormas\\config\\domain.xml and make sure the java-config node contains: <java-config classpath-suffix=\"\" debug-enabled=\"true\" debug-options=\"-agentlib:jdwp=transport=dt_socket,address=6009,server=n,suspend=y\" ... Open the Ant window, click on the \"+\" icon and select the build.xml file from the sormas-base project Execute the \"install\" and \"deploy-serverlibs\" scripts in this order Set the default working directory for run configurations: Run -> Edit Configurations -> Templates -> Application -> set the value for Working directory to $MODULE_WORKING_DIR$ Configure code formatting: install Eclipse Code Formatter for IntelliJ (https://plugins.jetbrains.com/plugin/6546-eclipse-code-formatter) open the plugin settings (Other Settings -> Eclipse Code Formatter) and select \"Use the Eclipse Code Formatter\" under \"Eclipse Formatter config file\", select sormas-base/java-formatter-profile.xml check optimize imports and, for \"Import order\", select sormas-base/java-importorder-profile.importorder Important: select \"Do not format other file types by IntelliJ formatter\" go to Preferences -> Editor -> Code style -> Java -> Imports: set class and static names counts for import with * to 99 for IntelliJ, code formatting is usually done with Ctrl+Alt+L. For automatic formatting, it's recommended to use the plugin Save Actions (https://plugins.jetbrains.com/plugin/7642-save-actions)","title":"IntelliJ"},{"location":"DEVELOPMENT_ENVIRONMENT/#android-studio","text":"Note: This is only needed for development of the SORMAS Android app * Install the latest Android Studio version (to avoid errors, start the installation with admin rights) * Start the application * To avoid errors, ensure that the path for the Android SDK contains no whitespaces * The path could be edited at Tools -> SDK Manager -> Android SDK Location * Open Android Studio and import the \"sormas-app\" module from SORMAS-Project * Create a keystore.properties file in sormas-app (see keystore.properties.example for reference - needed only for app deployment). * Build the Android Studio project by executing the gradle build (this may be done automatically) * Add an emulator with SDK version between the minSdkVersion and targetSdkVersion properties from build.gradle * On first start of the application enter the Sormas rest service URL for the server URL: http://10.0.2.2:6080/sormas-rest/ (see: https://developer.android.com/studio/run/emulator-networking) * Configure code formatting: - install Eclipse Code Formatter for Android studio (https://plugins.jetbrains.com/plugin/6546-eclipse-code-formatter) - open the plugin settings (Other Settings -> Eclipse Code Formatter) and select \"Use the Eclipse Code Formatter\" - under \"Eclipse Formatter config file\", select sormas-base/java-formatter-profile.xml - check optimize imports and, for \"Iport order\", select sormas-base/java-importorder-profile.importorder - Important:** select \"Do not format other file types by IntelliJ formatter\" - go to Preferences -> Editor -> Code style -> Java : set class and static names counts for import with * to 99 - for Android Studio, code formatting is usually done with Ctrl+Alt+L. For automatic formatting, it's recommended to use the plugin Save Actions (https://plugins.jetbrains.com/plugin/7642-save-actions)","title":"Android Studio"},{"location":"GUIDE_ADD_NEW_DISEASE/","text":"How to add a new disease? This guide explains how to add a new disease to SORMAS and how to configure the existing fields to be either available or hidden in the case forms. 0. Preparation Define which of the available case and contact data fields should be available for the new disease. The best way to do this is to follow these steps: Download the latest data dictionary https://github.com/hzi-braunschweig/SORMAS-Project/blob/development/sormas-api/src/main/resources/doc/SORMAS_Data_Dictionary.xlsx Go through all the fields of person, case, contact and their sub entities symptoms, epidemiological data, etc. The SOP for adding new diseases to SORMAS explains this in detail. If any field that is needed for your disease is missing, please have a look at the guide How to add a new field? . I. Adding the new disease Open the Disease enum class in the API project and add the new disease. Put it in alphabetical order (with the exception of \"OTHER\"). Add the name of the disease to the enum.properties translation resource file. You may also want to add a short name. Very important : We have now made a change to the API. Old versions are no longer compatible! When data with the new disease is send to a mobile device with an old version, it will not know about the disease type and lead to exceptions on the device. To avoid this the following has to be done: Open the InfoProvider.getMinimumRequiredVersion method. Set the version to the current development version (without the -SNAPSHOT). You can find the current version in the maven pom.xml configuration file. Add a color for the disease to the disease.scss styling file and the CssStyles.getDisease color method in sormas-ui SORMAS supports a simplified data entry mode that can be used during outbreaks. Its purpose is to reduce the number of fields that have to be entered by users to a minimum to reduce workload. If you want the disease to support this mode you need to include the disease in the Disease.isSupportingOutbreakMode method. II. Configuring the fields for the new disease By default a case of the new disease will only use fields that are marked with \"All\" in the data dictionary. Your disease will likely need to show additional fields. Do the following steps for all entities affected: Open the entity's API class (e.g. SymptomsDto) and go through all the member fields. Add the disease to the existing Diseases annotation. That's it. The forms in the web application and Android app will automatically evaluate the annotation to decide which fields to show.","title":"How to add a new disease?"},{"location":"GUIDE_ADD_NEW_DISEASE/#how-to-add-a-new-disease","text":"This guide explains how to add a new disease to SORMAS and how to configure the existing fields to be either available or hidden in the case forms.","title":"How to add a new disease?"},{"location":"GUIDE_ADD_NEW_DISEASE/#0-preparation","text":"Define which of the available case and contact data fields should be available for the new disease. The best way to do this is to follow these steps: Download the latest data dictionary https://github.com/hzi-braunschweig/SORMAS-Project/blob/development/sormas-api/src/main/resources/doc/SORMAS_Data_Dictionary.xlsx Go through all the fields of person, case, contact and their sub entities symptoms, epidemiological data, etc. The SOP for adding new diseases to SORMAS explains this in detail. If any field that is needed for your disease is missing, please have a look at the guide How to add a new field? .","title":"0. Preparation"},{"location":"GUIDE_ADD_NEW_DISEASE/#i-adding-the-new-disease","text":"Open the Disease enum class in the API project and add the new disease. Put it in alphabetical order (with the exception of \"OTHER\"). Add the name of the disease to the enum.properties translation resource file. You may also want to add a short name. Very important : We have now made a change to the API. Old versions are no longer compatible! When data with the new disease is send to a mobile device with an old version, it will not know about the disease type and lead to exceptions on the device. To avoid this the following has to be done: Open the InfoProvider.getMinimumRequiredVersion method. Set the version to the current development version (without the -SNAPSHOT). You can find the current version in the maven pom.xml configuration file. Add a color for the disease to the disease.scss styling file and the CssStyles.getDisease color method in sormas-ui SORMAS supports a simplified data entry mode that can be used during outbreaks. Its purpose is to reduce the number of fields that have to be entered by users to a minimum to reduce workload. If you want the disease to support this mode you need to include the disease in the Disease.isSupportingOutbreakMode method.","title":"I. Adding the new disease"},{"location":"GUIDE_ADD_NEW_DISEASE/#ii-configuring-the-fields-for-the-new-disease","text":"By default a case of the new disease will only use fields that are marked with \"All\" in the data dictionary. Your disease will likely need to show additional fields. Do the following steps for all entities affected: Open the entity's API class (e.g. SymptomsDto) and go through all the member fields. Add the disease to the existing Diseases annotation. That's it. The forms in the web application and Android app will automatically evaluate the annotation to decide which fields to show.","title":"II. Configuring the fields for the new disease"},{"location":"GUIDE_ADD_NEW_FIELD/","text":"How to add a new field? This guide explains how to add a new plain field to the SORMAS data schema. It does not explain how to add list fields, new sections or concepts to SORMAS. Important: This is the first version of this guide. Please get in contact if anything is not clear or you have suggestions on how to improve the guide, the source code or the underlying architecture. Example use cases A symptom is needed for a specific disease (e.g. headache) A field with additional epidemiological details on a case (e.g. contact with a special type of animal) 0. Preparation (!) Make sure the field is not already in the system. SORMAS has a lot of data fields and many of them are only used for a few diseases and hidden for other ones. The best way to make sure is to open the data dictionary and go through the existing fields of all related data sections: https://github.com/hzi-braunschweig/SORMAS-Project/blob/development/sormas-api/src/main/resources/doc/SORMAS_Data_Dictionary.xlsx Clearly define the field: Name and description Field type: plain text, pre-defined values (enum), date, time, number Example values Who is supposed to enter the field? Who is supposed to read the field? Set up your local development environment I. Adding the field to the SORMAS API The SORMAS API is the heart of the data schema. Accordingly, this is where you have to get started. Identify the class where the field needs to be added. For most scenarios you will only need to have a look at CaseDataDto.java and all the fields used in there, e.g. SymptomsDto. Add the field as a private member of the class with a get- and set-method. In addition a static final String to be used as a constant to identify the field. If the field has pre-defined values add a enum in the package of the class. Have a look at one of the existing enums for reference. Add the caption to captions.properties and description to description.properties in the project resources. For enums add all values to enum.properties. Symptoms.soreThroat = Sore throat/pharyngitis When you made additions/changes on keys in captions.properties , strings.properties or validations.properties you have to run I18nConstantGenerator (run as ... Java Application) to update the corresponding Constants classes. Very important : We have now officially made a change to the API which likely means that old versions are no longer fully compatible. When data with the new field is sent to a mobile device with an old version, it will not know about the field and the data is lost on the device. When the data is send back to the server the empty field may override any existing data and it's now also lost on the server itself. To avoid this the following has to be done: Open the InfoProvider.getMinimumRequiredVersion method. Set the version to the current development version (without the -SNAPSHOT). You can find the current version in the maven pom.xml configuration file. II. Adding the field to the SORMAS backend The SORMAS backend is responsible for persisting all data into the servers database and to make this data accessible. Accordingly it's necessary to extend the persistence logic with the new field. Identify the entity class that matches the API class where the field was added (e.g. Case.java). Add the field as a private member of the entity class with a get- and set-method. Add the correct JPA annotation to the get-method (see other fields for examples). @Enumerated(EnumType.STRING) public SymptomState getSoreThroat() { return soreThroat; } In addition to this the sormas_schema.sql file in sormas-base/sql has to be extended: Scroll to the bottom and add a new schema_version block. It starts with a comment that contains the date and a short info on the changes and the github issue id and ends with and \"INSERT INTO schema_version...\" where the version has to be incremented. ``` -- 2019-02-20 Additional signs and symptoms #938 INSERT INTO schema_version (version_number, comment) VALUES (131, 'Additional signs and symptoms #938'); 5. Within this block add a new column to the table that matches the entity where the new field was added in sormas-backend. You can scroll up to see examples of this for all the different field types. Note that the column name is all lower case. ALTER TABLE symptoms ADD COLUMN sorethroat varchar(255); ``` 6. Make sure to also add the column to the corresponding history table in the database. 7. Update default values if needed. 8. Try to execute the SQL on your system! Now we need to make sure data in the new field is exchanged between the backend entity classes and the API data transfer objects. Identify the *FacadeEjb class for the entity (e.g. CaseFacadeEjb). Extend the toDto and fromDto/fillOrBuildEntity methods to exchange data between the API class and the backend entity class that is persisted. target.setSoreThroat(source.getSoreThroat()); Now we need to make sure data in the new field is exported by the detailed export. Identify corresponding *ExportDto (e.g. CaseExportDto) Add the field as a private member of the dto class with a get- and set-method. Add the @Order annotation on the getter method of the new field @Order(33) public SymptomState getSoreThroat() { return soreThroat; } > NOTE : The @Order numbers should be unique so please increase the order of the getters below if there are any. Initialize the new field in the constructor Add the new field in the selection list in the getExportList method of the FacadeEJB cq.multiselect( ..., caseRoot.get(Case.SORE_THROAT), ... ) > NOTE : Make sure the order of the fields in the selection list corresponds the order of arguments in the constructor of ExportDto class III. Adding the field to the SORMAS UI The SORMAS UI is the web application that is used by supervisors, laboratory users, national instances and others. Here we have to extend the form where the field is supposed to be shown and edited. Note that the web application uses the same form for read and write mode, so the field only needs to be added once. Identify the Form class where the new field is supposed to be shown. Examples of this are SymptomsForm.class, CaseDataForm.class or EpiDataForm.class. Add the new field to the HTML layout definition in the top of the form class. The forms use column layouts based on the bootstrap CSS library. LayoutUtil.fluidRowLocs(SymptomsDto.TEMPERATURE, SymptomsDto.TEMPERATURE_SOURCE) + Go to the addFields method of the form and add the field. You can add it without defining a UI field type - this will use a default UI field type based on the type of the data field (see SormasFieldGroupFieldFactory): addFields(EpiDataDto.WATER_BODY, EpiDataDto.WATER_BODY_DETAILS, EpiDataDto.WATER_SOURCE); Or you can define the type of UI field that should be used and provide additional initialization for the field: ComboBox region = addField(CaseDataDto.REGION, ComboBox.class); region.addItems(FacadeProvider.getRegionFacade().getAllAsReference()); The FieldHelper class provides methods to conditionally make the field visible, required or read-only, based on the values of other fields. Finally have a try in the web application to check if everything is working as expected. IV. Adding the field to the SORMAS Android app The SORMAS Android app synchronizes with the server using the SORMAS ReST interface. The app does have it's own database to persist all data of the user for offline usage. Thus it's necessary to extend the entity classes used by the app. Identify the entity class in the sormas-app backend sub-package. Add the field as a private member of the entity class with a get- and set-method. Add the correct JPA or ORM-lite annotation to the private member (see other fields for examples). Note: In the future this may be replaced by using Android Room. Identify the *DtoHelper class for the entity (e.g. CaseDtoHelper). Extend the fillInnerFromAdo and fillInnerFromDto methods to exchange data between the API class and the app entity class that is persisted. SORMAS allows users to upgrade from old app versions. Thus it's necessary to add the needed SQL to the onUpgrade method in the DatabaseHelper class. Increment the DATABASE_VERSION variable in the DatabaseHelper class. Go to the end of the onUpgrade method and add a new case block that defines how to upgrade to the new version. Execute the needed SQL using the DAO (database access object) of the entity class. You can mostly use the same SQL used for adding the field to the SORMAS backend. The column name has to match the field name in the entity class (not all lower case). getDao(Symptoms.class).executeRaw(\"ALTER TABLE symptoms ADD COLUMN soreThroat varchar(255);\"); The SORMAS app has separate fragments used for read and edit activities. Each fragment is split into the xml layout file and the java class containing it's logic. Identify the edit fragment layout xml file where the field needs to be added. E.g. /res/layout/fragment_symptoms_edit_layout.xml Add the field to the layout. See the existing fields for reference. Our custom Android components automatically add captions and descriptions to the field. <de.symeda.sormas.app.component.controls.ControlSwitchField android:id=\"@+id/symptoms_soreThroat\" app:enumClass=\"@{symptomStateClass}\" app:slim=\"true\" app:value=\"@={data.soreThroat}\" style=\"@style/ControlSingleColumnStyle\" /> Note that this comes with automatic data-binding. Use \"@={...}\" for edit fields and \"@{...}\" for read fields. Identify the edit fragment java class. E.g. SymptomsEditFragment.java Add needed field initializations to the existing onAfterLayoutBinding method. If necessary you can prepare any data in the prepareFragmentData method, while the fragment is still loading. Since there are many use cases please have a look at the existing classes. Do the same for the read fragment and possibly also create fragment. Finally have a try in the app to check if everything is working as expected. Make sure data entered on the Android device is properly synchronized and also appears on the server. Now you are done :-)","title":"How to add a new field?"},{"location":"GUIDE_ADD_NEW_FIELD/#how-to-add-a-new-field","text":"This guide explains how to add a new plain field to the SORMAS data schema. It does not explain how to add list fields, new sections or concepts to SORMAS. Important: This is the first version of this guide. Please get in contact if anything is not clear or you have suggestions on how to improve the guide, the source code or the underlying architecture.","title":"How to add a new field?"},{"location":"GUIDE_ADD_NEW_FIELD/#example-use-cases","text":"A symptom is needed for a specific disease (e.g. headache) A field with additional epidemiological details on a case (e.g. contact with a special type of animal)","title":"Example use cases"},{"location":"GUIDE_ADD_NEW_FIELD/#0-preparation","text":"Make sure the field is not already in the system. SORMAS has a lot of data fields and many of them are only used for a few diseases and hidden for other ones. The best way to make sure is to open the data dictionary and go through the existing fields of all related data sections: https://github.com/hzi-braunschweig/SORMAS-Project/blob/development/sormas-api/src/main/resources/doc/SORMAS_Data_Dictionary.xlsx Clearly define the field: Name and description Field type: plain text, pre-defined values (enum), date, time, number Example values Who is supposed to enter the field? Who is supposed to read the field? Set up your local development environment","title":"0. Preparation (!)"},{"location":"GUIDE_ADD_NEW_FIELD/#i-adding-the-field-to-the-sormas-api","text":"The SORMAS API is the heart of the data schema. Accordingly, this is where you have to get started. Identify the class where the field needs to be added. For most scenarios you will only need to have a look at CaseDataDto.java and all the fields used in there, e.g. SymptomsDto. Add the field as a private member of the class with a get- and set-method. In addition a static final String to be used as a constant to identify the field. If the field has pre-defined values add a enum in the package of the class. Have a look at one of the existing enums for reference. Add the caption to captions.properties and description to description.properties in the project resources. For enums add all values to enum.properties. Symptoms.soreThroat = Sore throat/pharyngitis When you made additions/changes on keys in captions.properties , strings.properties or validations.properties you have to run I18nConstantGenerator (run as ... Java Application) to update the corresponding Constants classes. Very important : We have now officially made a change to the API which likely means that old versions are no longer fully compatible. When data with the new field is sent to a mobile device with an old version, it will not know about the field and the data is lost on the device. When the data is send back to the server the empty field may override any existing data and it's now also lost on the server itself. To avoid this the following has to be done: Open the InfoProvider.getMinimumRequiredVersion method. Set the version to the current development version (without the -SNAPSHOT). You can find the current version in the maven pom.xml configuration file.","title":"I. Adding the field to the SORMAS API"},{"location":"GUIDE_ADD_NEW_FIELD/#ii-adding-the-field-to-the-sormas-backend","text":"The SORMAS backend is responsible for persisting all data into the servers database and to make this data accessible. Accordingly it's necessary to extend the persistence logic with the new field. Identify the entity class that matches the API class where the field was added (e.g. Case.java). Add the field as a private member of the entity class with a get- and set-method. Add the correct JPA annotation to the get-method (see other fields for examples). @Enumerated(EnumType.STRING) public SymptomState getSoreThroat() { return soreThroat; } In addition to this the sormas_schema.sql file in sormas-base/sql has to be extended: Scroll to the bottom and add a new schema_version block. It starts with a comment that contains the date and a short info on the changes and the github issue id and ends with and \"INSERT INTO schema_version...\" where the version has to be incremented. ``` -- 2019-02-20 Additional signs and symptoms #938 INSERT INTO schema_version (version_number, comment) VALUES (131, 'Additional signs and symptoms #938'); 5. Within this block add a new column to the table that matches the entity where the new field was added in sormas-backend. You can scroll up to see examples of this for all the different field types. Note that the column name is all lower case. ALTER TABLE symptoms ADD COLUMN sorethroat varchar(255); ``` 6. Make sure to also add the column to the corresponding history table in the database. 7. Update default values if needed. 8. Try to execute the SQL on your system! Now we need to make sure data in the new field is exchanged between the backend entity classes and the API data transfer objects. Identify the *FacadeEjb class for the entity (e.g. CaseFacadeEjb). Extend the toDto and fromDto/fillOrBuildEntity methods to exchange data between the API class and the backend entity class that is persisted. target.setSoreThroat(source.getSoreThroat()); Now we need to make sure data in the new field is exported by the detailed export. Identify corresponding *ExportDto (e.g. CaseExportDto) Add the field as a private member of the dto class with a get- and set-method. Add the @Order annotation on the getter method of the new field @Order(33) public SymptomState getSoreThroat() { return soreThroat; } > NOTE : The @Order numbers should be unique so please increase the order of the getters below if there are any. Initialize the new field in the constructor Add the new field in the selection list in the getExportList method of the FacadeEJB cq.multiselect( ..., caseRoot.get(Case.SORE_THROAT), ... ) > NOTE : Make sure the order of the fields in the selection list corresponds the order of arguments in the constructor of ExportDto class","title":"II. Adding the field to the SORMAS backend"},{"location":"GUIDE_ADD_NEW_FIELD/#iii-adding-the-field-to-the-sormas-ui","text":"The SORMAS UI is the web application that is used by supervisors, laboratory users, national instances and others. Here we have to extend the form where the field is supposed to be shown and edited. Note that the web application uses the same form for read and write mode, so the field only needs to be added once. Identify the Form class where the new field is supposed to be shown. Examples of this are SymptomsForm.class, CaseDataForm.class or EpiDataForm.class. Add the new field to the HTML layout definition in the top of the form class. The forms use column layouts based on the bootstrap CSS library. LayoutUtil.fluidRowLocs(SymptomsDto.TEMPERATURE, SymptomsDto.TEMPERATURE_SOURCE) + Go to the addFields method of the form and add the field. You can add it without defining a UI field type - this will use a default UI field type based on the type of the data field (see SormasFieldGroupFieldFactory): addFields(EpiDataDto.WATER_BODY, EpiDataDto.WATER_BODY_DETAILS, EpiDataDto.WATER_SOURCE); Or you can define the type of UI field that should be used and provide additional initialization for the field: ComboBox region = addField(CaseDataDto.REGION, ComboBox.class); region.addItems(FacadeProvider.getRegionFacade().getAllAsReference()); The FieldHelper class provides methods to conditionally make the field visible, required or read-only, based on the values of other fields. Finally have a try in the web application to check if everything is working as expected.","title":"III. Adding the field to the SORMAS UI"},{"location":"GUIDE_ADD_NEW_FIELD/#iv-adding-the-field-to-the-sormas-android-app","text":"The SORMAS Android app synchronizes with the server using the SORMAS ReST interface. The app does have it's own database to persist all data of the user for offline usage. Thus it's necessary to extend the entity classes used by the app. Identify the entity class in the sormas-app backend sub-package. Add the field as a private member of the entity class with a get- and set-method. Add the correct JPA or ORM-lite annotation to the private member (see other fields for examples). Note: In the future this may be replaced by using Android Room. Identify the *DtoHelper class for the entity (e.g. CaseDtoHelper). Extend the fillInnerFromAdo and fillInnerFromDto methods to exchange data between the API class and the app entity class that is persisted. SORMAS allows users to upgrade from old app versions. Thus it's necessary to add the needed SQL to the onUpgrade method in the DatabaseHelper class. Increment the DATABASE_VERSION variable in the DatabaseHelper class. Go to the end of the onUpgrade method and add a new case block that defines how to upgrade to the new version. Execute the needed SQL using the DAO (database access object) of the entity class. You can mostly use the same SQL used for adding the field to the SORMAS backend. The column name has to match the field name in the entity class (not all lower case). getDao(Symptoms.class).executeRaw(\"ALTER TABLE symptoms ADD COLUMN soreThroat varchar(255);\"); The SORMAS app has separate fragments used for read and edit activities. Each fragment is split into the xml layout file and the java class containing it's logic. Identify the edit fragment layout xml file where the field needs to be added. E.g. /res/layout/fragment_symptoms_edit_layout.xml Add the field to the layout. See the existing fields for reference. Our custom Android components automatically add captions and descriptions to the field. <de.symeda.sormas.app.component.controls.ControlSwitchField android:id=\"@+id/symptoms_soreThroat\" app:enumClass=\"@{symptomStateClass}\" app:slim=\"true\" app:value=\"@={data.soreThroat}\" style=\"@style/ControlSingleColumnStyle\" /> Note that this comes with automatic data-binding. Use \"@={...}\" for edit fields and \"@{...}\" for read fields. Identify the edit fragment java class. E.g. SymptomsEditFragment.java Add needed field initializations to the existing onAfterLayoutBinding method. If necessary you can prepare any data in the prepareFragmentData method, while the fragment is still loading. Since there are many use cases please have a look at the existing classes. Do the same for the read fragment and possibly also create fragment. Finally have a try in the app to check if everything is working as expected. Make sure data entered on the Android device is properly synchronized and also appears on the server. Now you are done :-)","title":"IV. Adding the field to the SORMAS Android app"},{"location":"GUIDE_SORMAS2SORMAS_CERTIFICATE/","text":"How to create and add certificates? This guide explains how to: * create a new self-signed certificate, used for SORMAS to SORMAS communication * set up the server address list file * add certificates of other SORMAS instances to the local truststore * add other servers to the local server list Prerequisites Java is needed, because the keytool is used for certificate import. See Installing Java Using the certificate generation script Run bash ./generate-cert.sh If the sormas2sormas directory is not found, you will be prompted to provide its path. If the SORMAS_PROPERTIES environment variable is not available, the script will search for the sormas.properties file in /opt/domains/sormas/sormas.properties by default. If it is not found there, you will be prompted to provide the path to the sormas.properties file. For the generation of the certificate, the following data is needed: a password, a Common Name (CN) and an Organization (O). These may be set in environment variables (recommended), or provided manually as the script executes. The password environment variable should be named SORMAS_S2S_CERT_PASS . Please note that the password has to be at least 6 characters, or you will be prompted for a new one. the Common Name environment variable should be named SORMAS_S2S_CERT_CN . Important : for Germany, this value should be the SurvNet Code Site. E.g. 2.03.1.01. the Organization (O) environment variable should be named SORMAS_S2S_CERT_ORG . Important : for Germany, this value should be the name of the Health Department (Gesundheitsamt) to which the SORMAS instance will be assigned. E.g. GA Braunschweig After providing the requested data, the certificate files will be generated. The generated certificate has a validity of 3 years. The certificate files will be available in the root SORMAS directory, in the folder /sormas2sormas . A CSV file containing the access data for this instance will also be generated in the folder /sormas2sormas . It will be named server-access-data.csv . The file will contain on the first two columns of the first row the Common Name and the Organization, as provided when creating the certificate. Please fill in on the third column the full URL of the server. You will also have to set up a user for communicating with other SORMAS instances. The generated .p12 file should not be shared with third parties. The generated .crt file will be verified and shared with other SORMAS instances, from which this instance will be able to request data. Conversely, in order to enable other SORMAS instances to request data from this instance, their certificate files should be obtained and added to the local truststore. The server-access-data.csv file will also have to be shared so that the access data of this instance is known to other instances. More details can be found in the next section. The relevant properties will be automatically set by the script in the sormas.properties file. Adding a new certificate to the Truststore To enable other SORMAS instances to send and receive data from this instance, their certificate must be added to the truststore of this instance. Furthermore, the access data of other instances must be added to the local server list. To complete this setup, please follow the next steps: 1. Run bash ./import-to-truststore.sh 2. If the sormas2sormas directory is not found, you will be prompted to provide its path. 3. If the SORMAS_PROPERTIES environment variable is not available, the script will search for the sormas.properties file in /opt/domains/sormas/sormas.properties by default. If it is not found there, you will be prompted to provide the path to the sormas.properties file. 4. If sormas2sormas.truststore.p12 is not found in the folder /sormas2sormas , it will be created. The truststore password may be provided in an environment variable SORMAS_S2S_TRUSTSTORE_PASS . * If the aforementioned environment variable is not available, the truststore password will be searched in the sormas.properties file. * If it is not found there, you will be prompted to provide the truststore password. * The relevant properties will be automatically set by the script in the sormas.properties file. 5. If the server address list file server-list.csv is not found in the folder /sormas2sormas , it will also be created. 6. You will be prompted to provide the file name of the certificate to be imported. This certificate should be located in the /sormas2sormas folder. Please provide the name including the extension. E.g mycert.crt 7. After providing the requested data, the certificate will be imported to the truststore. 8. You should have also received a CSV file with the server access data. From this file, copy the line corresponding to the instance you would like to communicate with and add it to the local server address list file. This file is named server-list.csv and is located in the /sormas2sormas folder. Note : You may check that the Common Name and the Organization of the certificate match the ones corresponding to the server in the CSV file. 9. You may now delete the .crt file.","title":"How to create and add certificates?"},{"location":"GUIDE_SORMAS2SORMAS_CERTIFICATE/#how-to-create-and-add-certificates","text":"This guide explains how to: * create a new self-signed certificate, used for SORMAS to SORMAS communication * set up the server address list file * add certificates of other SORMAS instances to the local truststore * add other servers to the local server list","title":"How to create and add certificates?"},{"location":"GUIDE_SORMAS2SORMAS_CERTIFICATE/#prerequisites","text":"Java is needed, because the keytool is used for certificate import. See Installing Java","title":"Prerequisites"},{"location":"GUIDE_SORMAS2SORMAS_CERTIFICATE/#using-the-certificate-generation-script","text":"Run bash ./generate-cert.sh If the sormas2sormas directory is not found, you will be prompted to provide its path. If the SORMAS_PROPERTIES environment variable is not available, the script will search for the sormas.properties file in /opt/domains/sormas/sormas.properties by default. If it is not found there, you will be prompted to provide the path to the sormas.properties file. For the generation of the certificate, the following data is needed: a password, a Common Name (CN) and an Organization (O). These may be set in environment variables (recommended), or provided manually as the script executes. The password environment variable should be named SORMAS_S2S_CERT_PASS . Please note that the password has to be at least 6 characters, or you will be prompted for a new one. the Common Name environment variable should be named SORMAS_S2S_CERT_CN . Important : for Germany, this value should be the SurvNet Code Site. E.g. 2.03.1.01. the Organization (O) environment variable should be named SORMAS_S2S_CERT_ORG . Important : for Germany, this value should be the name of the Health Department (Gesundheitsamt) to which the SORMAS instance will be assigned. E.g. GA Braunschweig After providing the requested data, the certificate files will be generated. The generated certificate has a validity of 3 years. The certificate files will be available in the root SORMAS directory, in the folder /sormas2sormas . A CSV file containing the access data for this instance will also be generated in the folder /sormas2sormas . It will be named server-access-data.csv . The file will contain on the first two columns of the first row the Common Name and the Organization, as provided when creating the certificate. Please fill in on the third column the full URL of the server. You will also have to set up a user for communicating with other SORMAS instances. The generated .p12 file should not be shared with third parties. The generated .crt file will be verified and shared with other SORMAS instances, from which this instance will be able to request data. Conversely, in order to enable other SORMAS instances to request data from this instance, their certificate files should be obtained and added to the local truststore. The server-access-data.csv file will also have to be shared so that the access data of this instance is known to other instances. More details can be found in the next section. The relevant properties will be automatically set by the script in the sormas.properties file.","title":"Using the certificate generation script"},{"location":"GUIDE_SORMAS2SORMAS_CERTIFICATE/#adding-a-new-certificate-to-the-truststore","text":"To enable other SORMAS instances to send and receive data from this instance, their certificate must be added to the truststore of this instance. Furthermore, the access data of other instances must be added to the local server list. To complete this setup, please follow the next steps: 1. Run bash ./import-to-truststore.sh 2. If the sormas2sormas directory is not found, you will be prompted to provide its path. 3. If the SORMAS_PROPERTIES environment variable is not available, the script will search for the sormas.properties file in /opt/domains/sormas/sormas.properties by default. If it is not found there, you will be prompted to provide the path to the sormas.properties file. 4. If sormas2sormas.truststore.p12 is not found in the folder /sormas2sormas , it will be created. The truststore password may be provided in an environment variable SORMAS_S2S_TRUSTSTORE_PASS . * If the aforementioned environment variable is not available, the truststore password will be searched in the sormas.properties file. * If it is not found there, you will be prompted to provide the truststore password. * The relevant properties will be automatically set by the script in the sormas.properties file. 5. If the server address list file server-list.csv is not found in the folder /sormas2sormas , it will also be created. 6. You will be prompted to provide the file name of the certificate to be imported. This certificate should be located in the /sormas2sormas folder. Please provide the name including the extension. E.g mycert.crt 7. After providing the requested data, the certificate will be imported to the truststore. 8. You should have also received a CSV file with the server access data. From this file, copy the line corresponding to the instance you would like to communicate with and add it to the local server address list file. This file is named server-list.csv and is located in the /sormas2sormas folder. Note : You may check that the Common Name and the Organization of the certificate match the ones corresponding to the server in the CSV file. 9. You may now delete the .crt file.","title":"Adding a new certificate to the Truststore"},{"location":"I18N/","text":"SORMAS Translation FAQ Who is translating SORMAS? The translation of SORMAS relies on people from the community. If you would like to see SORMAS translated to your language, please read the points below and take part in the process. How is SORMAS translated? The official SORMAS translation is done using the Crowdin platform: https://crwd.in/sormas All translations done on the platform are automatically fed into SORMAS and are part of the bi-weekly release schedule. This means that any text you translate will likely be part of the next SORMAS release. Once your server (or the server of your country) is updated you will be able to see the translations in the web app and mobile app. How to participate in translating SORMAS You can join the translation project by creating a free account on Crowdin. You can also use your existing GitHub account. Before starting to translate, you need to request write access to the project. A member of the project will either accept your request or get in touch with you as soon as possible. Afterwards open the SORMAS project https://crwd.in/sormas and select the language you would like to translate. You will see all files that contain translatable texts: The most important one is captions.properties. It contains the captions for all the data entry fields of SORMAS. The captions are shared by the web app and mobile app. Click on the file to open the Crowdin editor that allows you to go through all translation entries one by one as shown in the picture below: How to add a new language to SORMAS If the language you would like to translate is not available yet, please get in contact with us: https://github.com/hzi-braunschweig/SORMAS-Project","title":"SORMAS Translation FAQ"},{"location":"I18N/#sormas-translation-faq","text":"","title":"SORMAS Translation FAQ"},{"location":"I18N/#who-is-translating-sormas","text":"The translation of SORMAS relies on people from the community. If you would like to see SORMAS translated to your language, please read the points below and take part in the process.","title":"Who is translating SORMAS?"},{"location":"I18N/#how-is-sormas-translated","text":"The official SORMAS translation is done using the Crowdin platform: https://crwd.in/sormas All translations done on the platform are automatically fed into SORMAS and are part of the bi-weekly release schedule. This means that any text you translate will likely be part of the next SORMAS release. Once your server (or the server of your country) is updated you will be able to see the translations in the web app and mobile app.","title":"How is SORMAS translated?"},{"location":"I18N/#how-to-participate-in-translating-sormas","text":"You can join the translation project by creating a free account on Crowdin. You can also use your existing GitHub account. Before starting to translate, you need to request write access to the project. A member of the project will either accept your request or get in touch with you as soon as possible. Afterwards open the SORMAS project https://crwd.in/sormas and select the language you would like to translate. You will see all files that contain translatable texts: The most important one is captions.properties. It contains the captions for all the data entry fields of SORMAS. The captions are shared by the web app and mobile app. Click on the file to open the Crowdin editor that allows you to go through all translation entries one by one as shown in the picture below:","title":"How to participate in translating SORMAS"},{"location":"I18N/#how-to-add-a-new-language-to-sormas","text":"If the language you would like to translate is not available yet, please get in contact with us: https://github.com/hzi-braunschweig/SORMAS-Project","title":"How to add a new language to SORMAS"},{"location":"LOAD_TESTING/","text":"Load Testing Guide Introduction This guide will help you set up an infrastructure to manually perform load tests on a SORMAS server (automatic load tests may become part of the release cycle at a later point in time). Please note that these tests are intended to measure the time specific requests require to be performed, not to stress test the server. Make sure to set up a local development environment or a test server to execute these tests as running them on a productive system is not recommended. Install Gatling To run the tests provided in this repository, you will need to install Gatling on your computer. Please follow the instructions on https://gatling.io/docs/current/installation (\"Using the Bundle\"). Download Test Simulations We have created simulations (which are basically test scenarios) that test the most performance-critical actions in the SORMAS apps: Open the surveillance dashboard Open the case directory Retrieve all cases for a mobile user via the REST interface Retrieve all persons for a mobile user via the REST interface Retrieve all infrastructure data via the REST interface Download the latest sormas_load_tests.zip file and extract its contents into your Gatling directory. Adjust Simulation Configuration Open the SimulationConfig.scala file in a text editor. Change the default value of the serverUrl variable to the URL of the server you want to test. If you're using a fresh SORMAS installation, you can leave the mobileUsername and mobilePassword variables as they are. Otherwise, type in the username and password of a mobile user (most likely a Surveillance Officer) on your system that has access to as many cases as possible. Finally, you can edit the numberOfUsers variable to determine the number of parallel requests performed when running the tests. Leaving these at 1 is a good idea to find out whether the tests are passing, but to actually load test your server, you want to increase this number to find out how its performing when multiple users are doing costly actions at the same time. Run the Load Tests Please note that currently, to run the CaseDirectorySimulation and DashboardSimulation scenarios, you need to log in to the web app first because the actual login operation is not part of the simulations. The simulations will still execute successfully if you don't, but the results won't be meaningful in any regard. Once everything is set up, navigate to the bin folder of your Gatling installation and run the gatling.bat file if you're using Windows or the gatling.sh file if you're using Linux. A command window will be opened that loads all the simulations from your user-files directory. Choose the simulation you want to run by typing in its number. Once the simulation has been executed, you can find its results in the results folder.","title":"Load Testing Guide"},{"location":"LOAD_TESTING/#load-testing-guide","text":"","title":"Load Testing Guide"},{"location":"LOAD_TESTING/#introduction","text":"This guide will help you set up an infrastructure to manually perform load tests on a SORMAS server (automatic load tests may become part of the release cycle at a later point in time). Please note that these tests are intended to measure the time specific requests require to be performed, not to stress test the server. Make sure to set up a local development environment or a test server to execute these tests as running them on a productive system is not recommended.","title":"Introduction"},{"location":"LOAD_TESTING/#install-gatling","text":"To run the tests provided in this repository, you will need to install Gatling on your computer. Please follow the instructions on https://gatling.io/docs/current/installation (\"Using the Bundle\").","title":"Install Gatling"},{"location":"LOAD_TESTING/#download-test-simulations","text":"We have created simulations (which are basically test scenarios) that test the most performance-critical actions in the SORMAS apps: Open the surveillance dashboard Open the case directory Retrieve all cases for a mobile user via the REST interface Retrieve all persons for a mobile user via the REST interface Retrieve all infrastructure data via the REST interface Download the latest sormas_load_tests.zip file and extract its contents into your Gatling directory.","title":"Download Test Simulations"},{"location":"LOAD_TESTING/#adjust-simulation-configuration","text":"Open the SimulationConfig.scala file in a text editor. Change the default value of the serverUrl variable to the URL of the server you want to test. If you're using a fresh SORMAS installation, you can leave the mobileUsername and mobilePassword variables as they are. Otherwise, type in the username and password of a mobile user (most likely a Surveillance Officer) on your system that has access to as many cases as possible. Finally, you can edit the numberOfUsers variable to determine the number of parallel requests performed when running the tests. Leaving these at 1 is a good idea to find out whether the tests are passing, but to actually load test your server, you want to increase this number to find out how its performing when multiple users are doing costly actions at the same time.","title":"Adjust Simulation Configuration"},{"location":"LOAD_TESTING/#run-the-load-tests","text":"Please note that currently, to run the CaseDirectorySimulation and DashboardSimulation scenarios, you need to log in to the web app first because the actual login operation is not part of the simulations. The simulations will still execute successfully if you don't, but the results won't be meaningful in any regard. Once everything is set up, navigate to the bin folder of your Gatling installation and run the gatling.bat file if you're using Windows or the gatling.sh file if you're using Linux. A command window will be opened that loads all the simulations from your user-files directory. Choose the simulation you want to run by typing in its number. Once the simulation has been executed, you can find its results in the results folder.","title":"Run the Load Tests"},{"location":"RELEASE/","text":"Creating a Release Release workflow As release workflow we use the Gitflow Workflow (see https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow). For releasing a new version of this project, we integrated the jgitflow-maven-plugin (see https://bitbucket.org/atlassian/jgit-flow/wiki/Home). Steps to build a new version: Checkout branch development . Run mvn install -Pwith-app . If the build was successful, run mvn jgitflow:release-start jgitflow:release-finish -Pwith-app,with-dep-poms . You will be asked for the release version. Leave this empty to keep the current snapshot version as release version number ( -SNAPSHOT will be cut of by jgitflow-maven-plugin). You will be asked for the next development version. Leave this empty and the plugin will increment the micro release number ( 1.0.1-SNAPSHOT becomes 1.0.2-SNAPSHOT ). If you want to alter the version just type e.g. 1.1.0-SNAPSHOT . The result is that the current state of branch development gets merged to branch master (without -SNAPSHOT), tagged as releases/version-1.0.1 and the development version is automatically increased. Version numbers Version Numbers = major.minor.micro For correct generation of android version codes the releases have to be at least minor releases. Micro releases are reserved for hotfixes of a published release. - Finish of a release: Increase major or minor number - Finish of a hotfix (merged directly back to branch master ): Increase micro number Android Version Code The versionCode for the Android app is autogenerated by the projects version. The convention for the versionCode aaabbbccd (generated of version aaa.bbb.cc ) is: - d: one digit for SNAPSHOT (0), Release Candidates (RC1 to RC8 = 1..8) or Final Release (9) - cc: two digits for micro releases (with leading zeros) - bbb: three digits for minor releases (with leading zeros) - aaa: major releases (if a > 0) Local configuration for jgitflow-maven-plugin The jgitflow-maven-plugin needs credentials for git, which are configurated as variables in sormas-base/pom.xml . To use it you need to configure this in your .m2/settings.xml (or pass it as arguments when executing the plugin). <profiles> <profile> <id>github-config</id> <!-- For jgitflow-maven-plugin against github.com --> <properties> <github.sormas.user>myUserName</github.sormas.user> <github.sormas.password>myPassword</github.sormas.password> </properties> </profile> </profiles> <activeProfiles> <activeProfile>github-config</activeProfile> </activeProfiles> Perform load testing and upload the results When a release has been done and the new SORMAS version has been deployed to the server that is used for load testing, refer to the load testing guide to perform them, ideally multiple times with different amounts of users set in the SimulationConfig.scala file (e.g. 1, 20, 100). Navigate to the results folder, rename the folders containing the individual tests (e.g. SIMULATION-NAME_AMOUNT-OF-USERS_SORMAS-VERSION) and zip them. Append the resulting archive to the release on GitHub, as well as a PDF file containing an overview of the results (see an earlier release for an example on how to do this; you'll need to open the individual simulations and retrieve the values from the respective index.html files).","title":"Creating a Release"},{"location":"RELEASE/#creating-a-release","text":"","title":"Creating a Release"},{"location":"RELEASE/#release-workflow","text":"As release workflow we use the Gitflow Workflow (see https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow). For releasing a new version of this project, we integrated the jgitflow-maven-plugin (see https://bitbucket.org/atlassian/jgit-flow/wiki/Home). Steps to build a new version: Checkout branch development . Run mvn install -Pwith-app . If the build was successful, run mvn jgitflow:release-start jgitflow:release-finish -Pwith-app,with-dep-poms . You will be asked for the release version. Leave this empty to keep the current snapshot version as release version number ( -SNAPSHOT will be cut of by jgitflow-maven-plugin). You will be asked for the next development version. Leave this empty and the plugin will increment the micro release number ( 1.0.1-SNAPSHOT becomes 1.0.2-SNAPSHOT ). If you want to alter the version just type e.g. 1.1.0-SNAPSHOT . The result is that the current state of branch development gets merged to branch master (without -SNAPSHOT), tagged as releases/version-1.0.1 and the development version is automatically increased.","title":"Release workflow"},{"location":"RELEASE/#version-numbers","text":"Version Numbers = major.minor.micro For correct generation of android version codes the releases have to be at least minor releases. Micro releases are reserved for hotfixes of a published release. - Finish of a release: Increase major or minor number - Finish of a hotfix (merged directly back to branch master ): Increase micro number","title":"Version numbers"},{"location":"RELEASE/#android-version-code","text":"The versionCode for the Android app is autogenerated by the projects version. The convention for the versionCode aaabbbccd (generated of version aaa.bbb.cc ) is: - d: one digit for SNAPSHOT (0), Release Candidates (RC1 to RC8 = 1..8) or Final Release (9) - cc: two digits for micro releases (with leading zeros) - bbb: three digits for minor releases (with leading zeros) - aaa: major releases (if a > 0)","title":"Android Version Code"},{"location":"RELEASE/#local-configuration-for-jgitflow-maven-plugin","text":"The jgitflow-maven-plugin needs credentials for git, which are configurated as variables in sormas-base/pom.xml . To use it you need to configure this in your .m2/settings.xml (or pass it as arguments when executing the plugin). <profiles> <profile> <id>github-config</id> <!-- For jgitflow-maven-plugin against github.com --> <properties> <github.sormas.user>myUserName</github.sormas.user> <github.sormas.password>myPassword</github.sormas.password> </properties> </profile> </profiles> <activeProfiles> <activeProfile>github-config</activeProfile> </activeProfiles>","title":"Local configuration for jgitflow-maven-plugin"},{"location":"RELEASE/#perform-load-testing-and-upload-the-results","text":"When a release has been done and the new SORMAS version has been deployed to the server that is used for load testing, refer to the load testing guide to perform them, ideally multiple times with different amounts of users set in the SimulationConfig.scala file (e.g. 1, 20, 100). Navigate to the results folder, rename the folders containing the individual tests (e.g. SIMULATION-NAME_AMOUNT-OF-USERS_SORMAS-VERSION) and zip them. Append the resulting archive to the release on GitHub, as well as a PDF file containing an overview of the results (see an earlier release for an example on how to do this; you'll need to open the individual simulations and retrieve the values from the respective index.html files).","title":"Perform load testing and upload the results"},{"location":"SERVER_CUSTOMIZATION/","text":"Customizing a SORMAS Server Content Server Configuration Importing Infrastructure Data Disease Configuration Feature Confguration Server Configuration After installing a SORMAS servers, you can customize various configurations that define how SORMAS operates and is set up. This is done in the sormas.properties file that you can find in your domain folder. This file contains explanations for every property and also a default value in case you want to revert any changes that you've made. Most of these properties are commented (indicated by a # in front of their name and value) because the default should work for most servers. If you want to change these properties, you can remove the # and specify a valid value. We strongly suggest to add values to the properties that are not commented by default because these are specific to your server (e.g. the default locale/language, the center of the country or region you're using SORMAS in and the URL that leads to the mobile .apk file). Please note that this file contains all the properties that existed in the SORMAS version that you initially installed on your server. We strongly suggest to read the release notes of new versions in order to keep yourself updated about new properties or whether the expected values of existing ones have changed. In any of these cases, you need to manually update the properties file and either insert the new property or change the existing value to one that is compatible. The release notes will give you instructions on how to do this. The following properties are currently configurable: Default locale (country.locale) : This is the locale your server is using as long as the user has not overwritten it in their settings. It impacts both the language that SORMAS is displayed in as well as e.g. date formats. EPID prefix (country.epidprefix) : SORMAS automatically generates EPID numbers for new cases. This is the prefix your country is using for all of these numbers. Most of the time it will be some sort of country code and should be three characters long. Country center/zoom (country.center.latitude, country.center.longitude and map.zoom) : These are the geo coordinates of the geographical center of the country or region you're using SORMAS in. Used to set the initial location of the maps used in dashboards and statistics. App URL (app.url) : The directory on your server where the mobile .apk file is stored that is used to automatically update the Android app after a new release. You should be able to copy the example given in the properties file and only have to replace the SERVER-NAME placeholder. File paths (temp.path, generated.path and custom.path) : The folders that SORMAS stores files in, either temporarily during case export or permanently like import templates. Files in temp.path are automatically deleted at midnight. Files in custom.path can be used to customize the login page, e.g. to provide default logins for demo servers or add additional contributors to the right sidebar. Automatic case classification (feature.automaticcaseclassification) : Determines whether SORMAS automatically classifies cases based on a number of criteria that are defined in the code. Email settings (email.sender.address and email.sender.name) : The email address and sender name that should be used when SORMAS is sending out emails, e.g. to notify users about specific events. SMS settings (sms.sender.name, sms.auth.key and sms.auth.secret) : Besides emails, SORMAS also supports sending automatic SMS to users at the same time (e.g. when a case has been classified as confirmed). The SMS provider SORMAS is using is the Vonage SMS API (https://www.vonage.com/communications-apis/sms/). If you have an account there, you can use your key and secret here to enable sending out SMS. Leaving these properties empty will disable this feature. CSV separator (csv.separator) : The separator that CSV files should use to separate columns. This is depending on your server locale. Most systems should be fine using the default ( , ), but e.g. German systems should be set to use ; . Name similarity threshold (namesimilaritythreshold) : This is used when comparing cases or contacts to find duplicates in the system, either in retrospection or during creation or import. The higher the value, the more restrictive the algorithm, i.e. less potential duplicates will be found. It is suggested to play around with this setting to see which value works for your country and language. Dev mode (devmode) : Enabling developer mode will give you access to a tab in the Configuration menu that allows admins to create dummy cases and contacts to quickly fill the database. This is only meant to be used on development or demo systems and should be left disabled for production servers. Infrastructure sync threshold (infrastructuresyncthreshold) : Synchronizing infrastructure data to mobile apps (e.g. regions or health facilities) is done in chunks to avoid connection timeouts. If you expect your users to have very bad internet connection, lowering this threshold could make it easier for them to synchronize this data. Archiving thresholds (daysAfterCaseGetsArchived and daysAfterEventGetsArchived) : The number of days without any changes after which cases/events are automatically archived (i.e. they will no longer be displayed in the normal directories, but still count towards statistics or counts on the dashboard and can still be viewed by users with the respective user right). If set to 0, automatic archiving is disabled. Rscript executable (rscript.executable) : The location of the Rscript executable. If you've installed Rscript on your server and specify the path here (the default should work for Linux systems as long as you've used the default install path), network diagrams for transmission chains will be shown in the web app. Symptom journal interface : Properties used to connect to an external symptom journal service. interface.symptomjournal.url is the URL to the website that SORMAS should connect to; interface.symptomjournal.authurl is the URL used to authenticate SORMAS at the external service; interface.symptomjournal.clientid and interface.symptomjournal.secret are the credentials used for the authentication process. Custom branding : Properties used to apply a custom branding to SORMAS that overrides its name and default logo. Using these properties also alters the sidebar and adds another customizable area to it. If you want to use this feature, set custombranding to true. custombranding.name is the name that you want to use, custombranding.logo.path is the path to the logo that should be used. Importing Infrastructure Data When you start a SORMAS server for the first time, some default infrastructure data is generated to ensure that the server is usable and the default users can be created. It is recommended (and, unless you're working on a demo server, necessary) to archive this default data and import the official infrastructure data of the country or part of the country that you intend to use SORMAS in instead. Import SORMAS by default splits infrastructure data into four categories. Starting from the highest administrative division, these are: Regions , Districts , Communities , and Health Facilities . In addition, Points of Entry represent places like harbors and airports where people are frequently entering the country, while Laboratories are technically health facilities that are specifically used for sample testing purposes. To import your data for one of these administrative divisions, log in as the default admin user and open the Configuration menu. Open any of the tabs for the infrastructure data you want to import and click on the Import button on the top right. You can download an import guide from within the popup window that will be opened, containing detailed instructions about the import process and the steps you need to go through in order to successfully import your data. Make sure that you always start with the highest administrative division when importing, i.e. regions, and work your way down to the lowest, because lower divisions typically contain references to higher divisions. Archive After importing your infrastructure data, you need to archive the default data unless you want it to appear in your app. To do that, again open the Configuration menu and the tab for the infrastructure data you want to archive. You can use the text filter on top of the screen to type in the name of the default data, then click on the edit icon to the right, and in the popup window that opens up, click on Archive and confirm your choice. After archiving the default infrastructure data, you might want to edit the default users and assign them to administrative divisions that you've imported. To do so, go to the User menu and click on the edit icon beneath the user you want to re-assign. Disease Configuration SORMAS supports a wide range of diseases, and not all of those might be relevant to any SORMAS instance or might be used in a different context. It is possible to adjust the following variables that define how the different diseases are handled: Whether the disease is active , i.e. it is used in this SORMAS instance Whether the disease is a primary disease, i.e. it is enabled for case surveillance; non-primary diseases can still be used for pathogen testing Whether the disease is case-based ; if not, it is only enabled for aggregate case reporting Whether contact follow-up is enabled The contact follow-up duration Right now, changing these variables unfortunately is not possible from within the user interface, but requires direct database access . If you have this access, you can edit the entries in the diseaseconfiguration table according to your needs. IMPORTANT: Whenever you edit an entry in this table, you also need to manually set the changedate to the current date and time. This is required in order for the mobile app to synchronize the changes and use the edited disease configuration. Feature Configuration Some of the features in SORMAS can be enabled or disabled for the system. Examples for this are aggregated reporting, event surveillance, national case sharing and more. Right now, changing these variables unfortunately is not possible from within the user interface, but requires direct database access . If you have this access, you can edit the entries in the featureconfiguration table. There will be an entry in the database table for each feature that is available in SORMAS Set the \"enabled\" value of the feature to true or false to enable or disable it The region, district, disease and enddate columns are currently only appicable for the line listing feature. The line listing feature is the only feature that can currently be configured using the UI. IMPORTANT: Whenever you edit an entry in this table, you also need to manually set the changedate to the current date and time. This is required in order for the mobile app to synchronize the changes and use the edited disease configuration.","title":"Customizing a SORMAS Server"},{"location":"SERVER_CUSTOMIZATION/#customizing-a-sormas-server","text":"","title":"Customizing a SORMAS Server"},{"location":"SERVER_CUSTOMIZATION/#content","text":"Server Configuration Importing Infrastructure Data Disease Configuration Feature Confguration","title":"Content"},{"location":"SERVER_CUSTOMIZATION/#server-configuration","text":"After installing a SORMAS servers, you can customize various configurations that define how SORMAS operates and is set up. This is done in the sormas.properties file that you can find in your domain folder. This file contains explanations for every property and also a default value in case you want to revert any changes that you've made. Most of these properties are commented (indicated by a # in front of their name and value) because the default should work for most servers. If you want to change these properties, you can remove the # and specify a valid value. We strongly suggest to add values to the properties that are not commented by default because these are specific to your server (e.g. the default locale/language, the center of the country or region you're using SORMAS in and the URL that leads to the mobile .apk file). Please note that this file contains all the properties that existed in the SORMAS version that you initially installed on your server. We strongly suggest to read the release notes of new versions in order to keep yourself updated about new properties or whether the expected values of existing ones have changed. In any of these cases, you need to manually update the properties file and either insert the new property or change the existing value to one that is compatible. The release notes will give you instructions on how to do this. The following properties are currently configurable: Default locale (country.locale) : This is the locale your server is using as long as the user has not overwritten it in their settings. It impacts both the language that SORMAS is displayed in as well as e.g. date formats. EPID prefix (country.epidprefix) : SORMAS automatically generates EPID numbers for new cases. This is the prefix your country is using for all of these numbers. Most of the time it will be some sort of country code and should be three characters long. Country center/zoom (country.center.latitude, country.center.longitude and map.zoom) : These are the geo coordinates of the geographical center of the country or region you're using SORMAS in. Used to set the initial location of the maps used in dashboards and statistics. App URL (app.url) : The directory on your server where the mobile .apk file is stored that is used to automatically update the Android app after a new release. You should be able to copy the example given in the properties file and only have to replace the SERVER-NAME placeholder. File paths (temp.path, generated.path and custom.path) : The folders that SORMAS stores files in, either temporarily during case export or permanently like import templates. Files in temp.path are automatically deleted at midnight. Files in custom.path can be used to customize the login page, e.g. to provide default logins for demo servers or add additional contributors to the right sidebar. Automatic case classification (feature.automaticcaseclassification) : Determines whether SORMAS automatically classifies cases based on a number of criteria that are defined in the code. Email settings (email.sender.address and email.sender.name) : The email address and sender name that should be used when SORMAS is sending out emails, e.g. to notify users about specific events. SMS settings (sms.sender.name, sms.auth.key and sms.auth.secret) : Besides emails, SORMAS also supports sending automatic SMS to users at the same time (e.g. when a case has been classified as confirmed). The SMS provider SORMAS is using is the Vonage SMS API (https://www.vonage.com/communications-apis/sms/). If you have an account there, you can use your key and secret here to enable sending out SMS. Leaving these properties empty will disable this feature. CSV separator (csv.separator) : The separator that CSV files should use to separate columns. This is depending on your server locale. Most systems should be fine using the default ( , ), but e.g. German systems should be set to use ; . Name similarity threshold (namesimilaritythreshold) : This is used when comparing cases or contacts to find duplicates in the system, either in retrospection or during creation or import. The higher the value, the more restrictive the algorithm, i.e. less potential duplicates will be found. It is suggested to play around with this setting to see which value works for your country and language. Dev mode (devmode) : Enabling developer mode will give you access to a tab in the Configuration menu that allows admins to create dummy cases and contacts to quickly fill the database. This is only meant to be used on development or demo systems and should be left disabled for production servers. Infrastructure sync threshold (infrastructuresyncthreshold) : Synchronizing infrastructure data to mobile apps (e.g. regions or health facilities) is done in chunks to avoid connection timeouts. If you expect your users to have very bad internet connection, lowering this threshold could make it easier for them to synchronize this data. Archiving thresholds (daysAfterCaseGetsArchived and daysAfterEventGetsArchived) : The number of days without any changes after which cases/events are automatically archived (i.e. they will no longer be displayed in the normal directories, but still count towards statistics or counts on the dashboard and can still be viewed by users with the respective user right). If set to 0, automatic archiving is disabled. Rscript executable (rscript.executable) : The location of the Rscript executable. If you've installed Rscript on your server and specify the path here (the default should work for Linux systems as long as you've used the default install path), network diagrams for transmission chains will be shown in the web app. Symptom journal interface : Properties used to connect to an external symptom journal service. interface.symptomjournal.url is the URL to the website that SORMAS should connect to; interface.symptomjournal.authurl is the URL used to authenticate SORMAS at the external service; interface.symptomjournal.clientid and interface.symptomjournal.secret are the credentials used for the authentication process. Custom branding : Properties used to apply a custom branding to SORMAS that overrides its name and default logo. Using these properties also alters the sidebar and adds another customizable area to it. If you want to use this feature, set custombranding to true. custombranding.name is the name that you want to use, custombranding.logo.path is the path to the logo that should be used.","title":"Server Configuration"},{"location":"SERVER_CUSTOMIZATION/#importing-infrastructure-data","text":"When you start a SORMAS server for the first time, some default infrastructure data is generated to ensure that the server is usable and the default users can be created. It is recommended (and, unless you're working on a demo server, necessary) to archive this default data and import the official infrastructure data of the country or part of the country that you intend to use SORMAS in instead.","title":"Importing Infrastructure Data"},{"location":"SERVER_CUSTOMIZATION/#import","text":"SORMAS by default splits infrastructure data into four categories. Starting from the highest administrative division, these are: Regions , Districts , Communities , and Health Facilities . In addition, Points of Entry represent places like harbors and airports where people are frequently entering the country, while Laboratories are technically health facilities that are specifically used for sample testing purposes. To import your data for one of these administrative divisions, log in as the default admin user and open the Configuration menu. Open any of the tabs for the infrastructure data you want to import and click on the Import button on the top right. You can download an import guide from within the popup window that will be opened, containing detailed instructions about the import process and the steps you need to go through in order to successfully import your data. Make sure that you always start with the highest administrative division when importing, i.e. regions, and work your way down to the lowest, because lower divisions typically contain references to higher divisions.","title":"Import"},{"location":"SERVER_CUSTOMIZATION/#archive","text":"After importing your infrastructure data, you need to archive the default data unless you want it to appear in your app. To do that, again open the Configuration menu and the tab for the infrastructure data you want to archive. You can use the text filter on top of the screen to type in the name of the default data, then click on the edit icon to the right, and in the popup window that opens up, click on Archive and confirm your choice. After archiving the default infrastructure data, you might want to edit the default users and assign them to administrative divisions that you've imported. To do so, go to the User menu and click on the edit icon beneath the user you want to re-assign.","title":"Archive"},{"location":"SERVER_CUSTOMIZATION/#disease-configuration","text":"SORMAS supports a wide range of diseases, and not all of those might be relevant to any SORMAS instance or might be used in a different context. It is possible to adjust the following variables that define how the different diseases are handled: Whether the disease is active , i.e. it is used in this SORMAS instance Whether the disease is a primary disease, i.e. it is enabled for case surveillance; non-primary diseases can still be used for pathogen testing Whether the disease is case-based ; if not, it is only enabled for aggregate case reporting Whether contact follow-up is enabled The contact follow-up duration Right now, changing these variables unfortunately is not possible from within the user interface, but requires direct database access . If you have this access, you can edit the entries in the diseaseconfiguration table according to your needs. IMPORTANT: Whenever you edit an entry in this table, you also need to manually set the changedate to the current date and time. This is required in order for the mobile app to synchronize the changes and use the edited disease configuration.","title":"Disease Configuration"},{"location":"SERVER_CUSTOMIZATION/#feature-configuration","text":"Some of the features in SORMAS can be enabled or disabled for the system. Examples for this are aggregated reporting, event surveillance, national case sharing and more. Right now, changing these variables unfortunately is not possible from within the user interface, but requires direct database access . If you have this access, you can edit the entries in the featureconfiguration table. There will be an entry in the database table for each feature that is available in SORMAS Set the \"enabled\" value of the feature to true or false to enable or disable it The region, district, disease and enddate columns are currently only appicable for the line listing feature. The line listing feature is the only feature that can currently be configured using the UI. IMPORTANT: Whenever you edit an entry in this table, you also need to manually set the changedate to the current date and time. This is required in order for the mobile app to synchronize the changes and use the edited disease configuration.","title":"Feature Configuration"},{"location":"SERVER_DEV_SETUP/","text":"Installing a SORMAS Server for development Note: This guide explains how to configure a SORMAS server on Linux and Windows systems for development. Please note that there is no database setup because the script supposes the use of the Docker Postgresql image (see [SORMAS-Docker][https://github.com/hzi-braunschweig/SORMAS-Docker]). Content Prerequisites Java 11 ant Postgres Database SORMAS Server Related Installing a SORMAS Server Prerequisites Java 11 See Installing Java SORMAS just recently moved to Java 11. We still need to support Java 8 for a transition period. Therefore, please just use Java 8 language features for now. Ant Download and install Ant, it can be done from Ant site or with packages from your Linux distribution. Postgres Database See Installing Postgresql Alternatively you can use the Docker image available in SORMAS-Docker repository. SORMAS Server Install you own Payara server (see installing SORMAS Server ) or run bash ./server-setup-dev-docker.sh This script will download Payara (if needed) and install SORMAS in the Payara server. You can edit this script to change paths and ports. Other steps : * IMPORTANT : Adjust the SORMAS configuration for your country in /opt/domains/sormas/sormas.properties * Adjust the logging configuration in ${HOME}/opt/domains/sormas/config/logback.xml based on your needs (e.g. configure and activate email appender) * Build and deploy applications (ear and war) with you IDE. Other components See Installing a SORMAS Server","title":"Installing a SORMAS Server for development"},{"location":"SERVER_DEV_SETUP/#installing-a-sormas-server-for-development","text":"Note: This guide explains how to configure a SORMAS server on Linux and Windows systems for development. Please note that there is no database setup because the script supposes the use of the Docker Postgresql image (see [SORMAS-Docker][https://github.com/hzi-braunschweig/SORMAS-Docker]).","title":"Installing a SORMAS Server for development"},{"location":"SERVER_DEV_SETUP/#content","text":"Prerequisites Java 11 ant Postgres Database SORMAS Server","title":"Content"},{"location":"SERVER_DEV_SETUP/#related","text":"Installing a SORMAS Server","title":"Related"},{"location":"SERVER_DEV_SETUP/#prerequisites","text":"","title":"Prerequisites"},{"location":"SERVER_DEV_SETUP/#java-11","text":"See Installing Java SORMAS just recently moved to Java 11. We still need to support Java 8 for a transition period. Therefore, please just use Java 8 language features for now.","title":"Java 11"},{"location":"SERVER_DEV_SETUP/#ant","text":"Download and install Ant, it can be done from Ant site or with packages from your Linux distribution.","title":"Ant"},{"location":"SERVER_DEV_SETUP/#postgres-database","text":"See Installing Postgresql Alternatively you can use the Docker image available in SORMAS-Docker repository.","title":"Postgres Database"},{"location":"SERVER_DEV_SETUP/#sormas-server","text":"Install you own Payara server (see installing SORMAS Server ) or run bash ./server-setup-dev-docker.sh This script will download Payara (if needed) and install SORMAS in the Payara server. You can edit this script to change paths and ports. Other steps : * IMPORTANT : Adjust the SORMAS configuration for your country in /opt/domains/sormas/sormas.properties * Adjust the logging configuration in ${HOME}/opt/domains/sormas/config/logback.xml based on your needs (e.g. configure and activate email appender) * Build and deploy applications (ear and war) with you IDE.","title":"SORMAS Server"},{"location":"SERVER_DEV_SETUP/#other-components","text":"See Installing a SORMAS Server","title":"Other components"},{"location":"SERVER_SETUP/","text":"Installing a SORMAS Server Note: This guide explains how to set up a SORMAS server on Linux and Windows systems, the latter only being intended for usage on development systems. Please also note that certain parts of the setup script will not be executed on Windows. Content Prerequisites Java 11 Postgres Database SORMAS Server Web Server Setup Apache Web Server Firewall Postfix Mail Server Testing the Server Setup R Software Environment Troubleshooting Related Creating an App for a Demo Server Prerequisites Java 11 Download and install the Java 11 JDK (not JRE) for your operating system. We suggest to use Zulu OpenJDK: https://www.azul.com/downloads/zulu/ Linux : https://docs.azul.com/zulu/zuludocs/#ZuluUserGuide/PrepareZuluPlatform/AttachAPTRepositoryUbuntuOrDebianSys.htm sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9 sudo apt-add-repository 'deb https://repos.azul.com/zulu/deb/ stable main' sudo apt-get update sudo apt-get install zulu11 Windows : For testing and development environments we suggest to download and run the installer of the Java 11 JDK for 32 or 64 bit client systems (depending on your system). You can check your Java version from the shell/command line using: java -version Postgres Database Install PostgreSQL (currently 9.5, 9.6 or 10) on your system (manuals for all OS can be found here: https://www.postgresql.org/download) Set max_connections = 288 and max_prepared_transactions = 256 (at least, sum of all connection pools) in postgresql.conf (e.g. /etc/postgresql/10.0/main/postgresql.conf ; C:/Program Files/PostgreSQL/10.0/data ) - make sure the property is uncommented Install the \"temporal tables\" extension for Postgres (https://github.com/arkhipov/temporal_tables) Windows : Download the latest version for your Postgres version: https://github.com/arkhipov/temporal_tables/releases/latest, then copy the DLL from the project into the PostgreSQL's lib directory and the .sql and .control files into the directory share\\extension. Linux (see https://github.com/arkhipov/temporal_tables#installation): sudo apt-get install libpq-dev sudo apt-get install postgresql-server-dev-all sudo apt install pgxnclient Check for GCC: gcc --version and install if missing sudo pgxn install temporal_tables The packages can be removed afterward SORMAS Server Get the latest SORMAS build by downloading the ZIP archive from the latest release on GitHub: https://github.com/hzi-braunschweig/SORMAS-Open/releases/latest Linux : Unzip the archive, copy/upload its contents to /root/deploy/sormas/$(date +%F) and make the setup script executable. cd /root/deploy/sormas SORMAS_VERSION=1.y.z wget https://github.com/hzi-braunschweig/SORMAS-Project/releases/download/v${SORMAS_VERSION}/sormas_${SORMAS_VERSION}.zip unzip sormas_${SORMAS_VERSION}.zip mv deploy/ $(date +%F) rm sormas_${SORMAS_VERSION}.zip chmod +x $(date +%F)/server-setup.sh Windows : Download & install Git for Windows. This will provide a bash emulation that you can use to run the setup script: https://gitforwindows.org/ Unzip the ZIP archive (e.g. into you download directory) Open Git Bash and navigate to the setup sub-directory Optional: Open server-setup.sh in a text editor to customize the install paths, database access and ports for the server. The default ports are 6080 (HTTP), 6081 (HTTPS) and 6048 (admin). Important: Do not change the name of the database user. The pre-defined name is used in the statements executed in the database. Set up the database and a Payara domain for SORMAS by executing the setup script: sudo -s ./server-setup.sh Press enter whenever asked for it IMPORTANT : Make sure the script executed successfully. If anything goes wrong you need to fix the problem (or ask for help), then delete the created domain directory and re-execute the script. IMPORTANT : Adjust the SORMAS configuration for your country in /opt/domains/sormas/sormas.properties Adjust the logging configuration in /opt/domains/sormas/config/logback.xml based on your needs (e.g. configure and activate email appender) Linux: Update the SORMAS domain Web Server Setup Apache Web Server Note: This is not necessary for development systems. When you are using SORMAS in a production environment you should use a http server like Apache 2 instead of putting the Payara server in the first line. Here are some things that you should do to configure the Apache server as a proxy: Activate all needed modules: a2enmod ssl a2enmod rewrite a2enmod proxy a2enmod proxy_http a2enmod headers Create a new site /etc/apache2/sites-available/your.sormas.server.url.conf (e.g. sormas.org.conf) Force SSL secured connections: redirect from http to https: ServerName your.sormas.server.url RewriteEngine On RewriteCond %{HTTPS} !=on RewriteRule ^/(.*) https://your.sormas.server.url/$1 [R,L] ServerName your.sormas.server.url ... * Configure logging: ErrorLog /var/log/apache2/error.log LogLevel warn LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b %D \\\"%{User}i\\\" \\\"%{Connection}i\\\" \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\"\" combined_ext CustomLog /var/log/apache2/access.log combined_ext * SSL key config: SSLEngine on SSLCertificateFile /etc/ssl/certs/your.sormas.server.url.crt SSLCertificateKeyFile /etc/ssl/private/your.sormas.server.url.key SSLCertificateChainFile /etc/ssl/certs/your.sormas.server.url.ca-bundle disable weak ciphers and old TLS/SSL SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE$ SSLHonorCipherOrder off * Add a proxy pass to the local port: ProxyRequests Off ProxyPass /sormas-ui http://localhost:6080/sormas-ui ProxyPassReverse /sormas-ui http://localhost:6080/sormas-ui ProxyPass /sormas-rest http://localhost:6080/sormas-rest ProxyPassReverse /sormas-rest http://localhost:6080/sormas-rest * Configure security settings: Header always set X-Content-Type-Options \"nosniff\" Header always set X-Xss-Protection \"1; mode=block\" Disable Caching Header always set Cache-Control \"no-cache, no-store, must-revalidate, private\" Header always set Pragma \"no-cache\" Header always set Content-Security-Policy \\ \"default-src 'none'; \\ object-src 'self'; \\ script-src 'self' 'unsafe-inline' 'unsafe-eval'; \\ connect-src https://fonts.googleapis.com https://fonts.gstatic.com 'self'; \\ img-src *; \\ style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; \\ font-src https://fonts.gstatic.com 'self'; \\ frame-src 'self'; \\ worker-src 'self'; \\ manifest-src 'self'; \\ frame-ancestors 'self' The Content-Type header was either missing or empty. Ensure each page is setting the specific and appropriate content-type value for the content being delivered. AddType application/vnd.ms-fontobject .eot AddType application/x-font-opentype .otf AddType image/svg+xml .svg AddType application/x-font-ttf .ttf AddType application/font-woff .woff * Activate output compression (very important!): AddOutputFilterByType DEFLATE text/plain text/html text/xml AddOutputFilterByType DEFLATE text/css text/javascript AddOutputFilterByType DEFLATE application/json AddOutputFilterByType DEFLATE application/xml application/xhtml+xml AddOutputFilterByType DEFLATE application/javascript application/x-javascript DeflateCompressionLevel 1 Provide the android apk: Options -Indexes AliasMatch \"/downloads/sormas-(.*)\" \"/var/www/sormas/downloads/sormas-$1\" For the Apache 2 security configuration we suggest the following settings ( /etc/apache2/conf-available/security.conf ): ServerTokens Prod ServerSignature Off TraceEnable Off Header always set Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload\" Header unset X-Frame-Options Header always set X-Frame-Options SAMEORIGIN Header unset Referrer-Policy Header always set Referrer-Policy \"same-origin\" Header edit Set-Cookie \"(?i)^((?:(?!;\\s?HttpOnly).)+)$\" \"$1;HttpOnly\" Header edit Set-Cookie \"(?i)^((?:(?!;\\s?Secure).)+)$\" \"$1;Secure\" Header unset X-Powered-By Header unset Server In case you need to update the site config while the server is running, use the following command to publish the changes without the need for a reload: apache2ctl graceful Firewall The server should only publish the ports that are needed. For SORMAS this is port 80 (HTTP) and 443 (HTTPS). In addition you will need the SSH port to access the server for admin purposes. We suggest to use UFW (Uncomplicated Firewall) which provides a simple interface to iptables: sudo apt-get install ufw sudo ufw default deny incoming sudo ufw default allow outgoing sudo ufw allow ssh sudo ufw allow http sudo ufw allow https sudo ufw enable Postfix Mail Server Install postfix and mailutils: apt install aptitude aptitude install postfix -> choose \"satelite system\" apt install mailutils Configure your system: nano /etc/aliases -> add \"root: enter-your@support-email-here.com\" nano /opt/domains/sormas/config/logback.xml -> make sure \"EMAIL_ERROR\" appender is active and sends out to your email address Testing the Server Setup Use SSL Labs to test your server security config: https://www.ssllabs.com/ssltest R Software Environment In order to enable disease network diagrams in the contact dashboard, R and several extension packages are required. Then the Rscript executable has to be configured in the sormas.properties file. This can be conveniently accomplished by executing the R setup script from the SORMAS ZIP archive (see SORMAS Server ): If the SORMAS installation has been customized, r-setup.sh the install paths may have to be adjusted accordingly with a text editor. Execute R setup script: chmod +x r-setup.sh ./r-setup.sh Follow the instructions of the script. SORMAS to SORMAS Certificate Setup To be able to communicate with other SORMAS instances, there are some additional steps which need to be taken, in order to set up the certificate and the truststore. Please see the related guide for detailed instructions regarding SORMAS to SORMAS setup. Troubleshooting Problem: Login fails Check that the users table does have a corresponding entry. If not, the database initialization that is done when deploying sormas-ear.ear probably had an error. Problem: Server is out of memory Old servers were set up with a memory size of less than 2048MB. You can change this using the following commands: /opt/payara-172/glassfish/bin/asadmin --port 6048 delete-jvm-options -Xmx512m /opt/payara-172/glassfish/bin/asadmin --port 6048 delete-jvm-options -Xmx1024m /opt/payara-172/glassfish/bin/asadmin --port 6048 create-jvm-options -Xmx2048m Alternative: You can edit the settings directly in the domain.xml in the config directory of the SORMAS domain. Just search for Xmx - there should be two entries that need to be changed.","title":"Manual Setup"},{"location":"SERVER_SETUP/#installing-a-sormas-server","text":"Note: This guide explains how to set up a SORMAS server on Linux and Windows systems, the latter only being intended for usage on development systems. Please also note that certain parts of the setup script will not be executed on Windows.","title":"Installing a SORMAS Server"},{"location":"SERVER_SETUP/#content","text":"Prerequisites Java 11 Postgres Database SORMAS Server Web Server Setup Apache Web Server Firewall Postfix Mail Server Testing the Server Setup R Software Environment Troubleshooting","title":"Content"},{"location":"SERVER_SETUP/#related","text":"Creating an App for a Demo Server","title":"Related"},{"location":"SERVER_SETUP/#prerequisites","text":"","title":"Prerequisites"},{"location":"SERVER_SETUP/#java-11","text":"Download and install the Java 11 JDK (not JRE) for your operating system. We suggest to use Zulu OpenJDK: https://www.azul.com/downloads/zulu/ Linux : https://docs.azul.com/zulu/zuludocs/#ZuluUserGuide/PrepareZuluPlatform/AttachAPTRepositoryUbuntuOrDebianSys.htm sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9 sudo apt-add-repository 'deb https://repos.azul.com/zulu/deb/ stable main' sudo apt-get update sudo apt-get install zulu11 Windows : For testing and development environments we suggest to download and run the installer of the Java 11 JDK for 32 or 64 bit client systems (depending on your system). You can check your Java version from the shell/command line using: java -version","title":"Java 11"},{"location":"SERVER_SETUP/#postgres-database","text":"Install PostgreSQL (currently 9.5, 9.6 or 10) on your system (manuals for all OS can be found here: https://www.postgresql.org/download) Set max_connections = 288 and max_prepared_transactions = 256 (at least, sum of all connection pools) in postgresql.conf (e.g. /etc/postgresql/10.0/main/postgresql.conf ; C:/Program Files/PostgreSQL/10.0/data ) - make sure the property is uncommented Install the \"temporal tables\" extension for Postgres (https://github.com/arkhipov/temporal_tables) Windows : Download the latest version for your Postgres version: https://github.com/arkhipov/temporal_tables/releases/latest, then copy the DLL from the project into the PostgreSQL's lib directory and the .sql and .control files into the directory share\\extension. Linux (see https://github.com/arkhipov/temporal_tables#installation): sudo apt-get install libpq-dev sudo apt-get install postgresql-server-dev-all sudo apt install pgxnclient Check for GCC: gcc --version and install if missing sudo pgxn install temporal_tables The packages can be removed afterward","title":"Postgres Database"},{"location":"SERVER_SETUP/#sormas-server","text":"Get the latest SORMAS build by downloading the ZIP archive from the latest release on GitHub: https://github.com/hzi-braunschweig/SORMAS-Open/releases/latest Linux : Unzip the archive, copy/upload its contents to /root/deploy/sormas/$(date +%F) and make the setup script executable. cd /root/deploy/sormas SORMAS_VERSION=1.y.z wget https://github.com/hzi-braunschweig/SORMAS-Project/releases/download/v${SORMAS_VERSION}/sormas_${SORMAS_VERSION}.zip unzip sormas_${SORMAS_VERSION}.zip mv deploy/ $(date +%F) rm sormas_${SORMAS_VERSION}.zip chmod +x $(date +%F)/server-setup.sh Windows : Download & install Git for Windows. This will provide a bash emulation that you can use to run the setup script: https://gitforwindows.org/ Unzip the ZIP archive (e.g. into you download directory) Open Git Bash and navigate to the setup sub-directory Optional: Open server-setup.sh in a text editor to customize the install paths, database access and ports for the server. The default ports are 6080 (HTTP), 6081 (HTTPS) and 6048 (admin). Important: Do not change the name of the database user. The pre-defined name is used in the statements executed in the database. Set up the database and a Payara domain for SORMAS by executing the setup script: sudo -s ./server-setup.sh Press enter whenever asked for it IMPORTANT : Make sure the script executed successfully. If anything goes wrong you need to fix the problem (or ask for help), then delete the created domain directory and re-execute the script. IMPORTANT : Adjust the SORMAS configuration for your country in /opt/domains/sormas/sormas.properties Adjust the logging configuration in /opt/domains/sormas/config/logback.xml based on your needs (e.g. configure and activate email appender) Linux: Update the SORMAS domain","title":"SORMAS Server"},{"location":"SERVER_SETUP/#web-server-setup","text":"","title":"Web Server Setup"},{"location":"SERVER_SETUP/#apache-web-server","text":"Note: This is not necessary for development systems. When you are using SORMAS in a production environment you should use a http server like Apache 2 instead of putting the Payara server in the first line. Here are some things that you should do to configure the Apache server as a proxy: Activate all needed modules: a2enmod ssl a2enmod rewrite a2enmod proxy a2enmod proxy_http a2enmod headers Create a new site /etc/apache2/sites-available/your.sormas.server.url.conf (e.g. sormas.org.conf) Force SSL secured connections: redirect from http to https: ServerName your.sormas.server.url RewriteEngine On RewriteCond %{HTTPS} !=on RewriteRule ^/(.*) https://your.sormas.server.url/$1 [R,L] ServerName your.sormas.server.url ... * Configure logging: ErrorLog /var/log/apache2/error.log LogLevel warn LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b %D \\\"%{User}i\\\" \\\"%{Connection}i\\\" \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\"\" combined_ext CustomLog /var/log/apache2/access.log combined_ext * SSL key config: SSLEngine on SSLCertificateFile /etc/ssl/certs/your.sormas.server.url.crt SSLCertificateKeyFile /etc/ssl/private/your.sormas.server.url.key SSLCertificateChainFile /etc/ssl/certs/your.sormas.server.url.ca-bundle","title":"Apache Web Server"},{"location":"SERVER_SETUP/#disable-weak-ciphers-and-old-tlsssl","text":"SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE$ SSLHonorCipherOrder off * Add a proxy pass to the local port: ProxyRequests Off ProxyPass /sormas-ui http://localhost:6080/sormas-ui ProxyPassReverse /sormas-ui http://localhost:6080/sormas-ui ProxyPass /sormas-rest http://localhost:6080/sormas-rest ProxyPassReverse /sormas-rest http://localhost:6080/sormas-rest * Configure security settings: Header always set X-Content-Type-Options \"nosniff\" Header always set X-Xss-Protection \"1; mode=block\"","title":"disable weak ciphers and old TLS/SSL"},{"location":"SERVER_SETUP/#disable-caching","text":"Header always set Cache-Control \"no-cache, no-store, must-revalidate, private\" Header always set Pragma \"no-cache\" Header always set Content-Security-Policy \\ \"default-src 'none'; \\ object-src 'self'; \\ script-src 'self' 'unsafe-inline' 'unsafe-eval'; \\ connect-src https://fonts.googleapis.com https://fonts.gstatic.com 'self'; \\ img-src *; \\ style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; \\ font-src https://fonts.gstatic.com 'self'; \\ frame-src 'self'; \\ worker-src 'self'; \\ manifest-src 'self'; \\ frame-ancestors 'self'","title":"Disable Caching"},{"location":"SERVER_SETUP/#the-content-type-header-was-either-missing-or-empty","text":"","title":"The Content-Type header was either missing or empty."},{"location":"SERVER_SETUP/#ensure-each-page-is-setting-the-specific-and-appropriate-content-type-value-for-the-content-being-delivered","text":"AddType application/vnd.ms-fontobject .eot AddType application/x-font-opentype .otf AddType image/svg+xml .svg AddType application/x-font-ttf .ttf AddType application/font-woff .woff * Activate output compression (very important!): AddOutputFilterByType DEFLATE text/plain text/html text/xml AddOutputFilterByType DEFLATE text/css text/javascript AddOutputFilterByType DEFLATE application/json AddOutputFilterByType DEFLATE application/xml application/xhtml+xml AddOutputFilterByType DEFLATE application/javascript application/x-javascript DeflateCompressionLevel 1 Provide the android apk: Options -Indexes AliasMatch \"/downloads/sormas-(.*)\" \"/var/www/sormas/downloads/sormas-$1\" For the Apache 2 security configuration we suggest the following settings ( /etc/apache2/conf-available/security.conf ): ServerTokens Prod ServerSignature Off TraceEnable Off Header always set Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload\" Header unset X-Frame-Options Header always set X-Frame-Options SAMEORIGIN Header unset Referrer-Policy Header always set Referrer-Policy \"same-origin\" Header edit Set-Cookie \"(?i)^((?:(?!;\\s?HttpOnly).)+)$\" \"$1;HttpOnly\" Header edit Set-Cookie \"(?i)^((?:(?!;\\s?Secure).)+)$\" \"$1;Secure\" Header unset X-Powered-By Header unset Server In case you need to update the site config while the server is running, use the following command to publish the changes without the need for a reload: apache2ctl graceful","title":"Ensure each page is setting the specific and appropriate content-type value for the content being delivered."},{"location":"SERVER_SETUP/#firewall","text":"The server should only publish the ports that are needed. For SORMAS this is port 80 (HTTP) and 443 (HTTPS). In addition you will need the SSH port to access the server for admin purposes. We suggest to use UFW (Uncomplicated Firewall) which provides a simple interface to iptables: sudo apt-get install ufw sudo ufw default deny incoming sudo ufw default allow outgoing sudo ufw allow ssh sudo ufw allow http sudo ufw allow https sudo ufw enable","title":"Firewall"},{"location":"SERVER_SETUP/#postfix-mail-server","text":"Install postfix and mailutils: apt install aptitude aptitude install postfix -> choose \"satelite system\" apt install mailutils Configure your system: nano /etc/aliases -> add \"root: enter-your@support-email-here.com\" nano /opt/domains/sormas/config/logback.xml -> make sure \"EMAIL_ERROR\" appender is active and sends out to your email address","title":"Postfix Mail Server"},{"location":"SERVER_SETUP/#testing-the-server-setup","text":"Use SSL Labs to test your server security config: https://www.ssllabs.com/ssltest","title":"Testing the Server Setup"},{"location":"SERVER_SETUP/#r-software-environment","text":"In order to enable disease network diagrams in the contact dashboard, R and several extension packages are required. Then the Rscript executable has to be configured in the sormas.properties file. This can be conveniently accomplished by executing the R setup script from the SORMAS ZIP archive (see SORMAS Server ): If the SORMAS installation has been customized, r-setup.sh the install paths may have to be adjusted accordingly with a text editor. Execute R setup script: chmod +x r-setup.sh ./r-setup.sh Follow the instructions of the script.","title":"R Software Environment"},{"location":"SERVER_SETUP/#sormas-to-sormas-certificate-setup","text":"To be able to communicate with other SORMAS instances, there are some additional steps which need to be taken, in order to set up the certificate and the truststore. Please see the related guide for detailed instructions regarding SORMAS to SORMAS setup.","title":"SORMAS to SORMAS Certificate Setup"},{"location":"SERVER_SETUP/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"SERVER_SETUP/#problem-login-fails","text":"Check that the users table does have a corresponding entry. If not, the database initialization that is done when deploying sormas-ear.ear probably had an error.","title":"Problem: Login fails"},{"location":"SERVER_SETUP/#problem-server-is-out-of-memory","text":"Old servers were set up with a memory size of less than 2048MB. You can change this using the following commands: /opt/payara-172/glassfish/bin/asadmin --port 6048 delete-jvm-options -Xmx512m /opt/payara-172/glassfish/bin/asadmin --port 6048 delete-jvm-options -Xmx1024m /opt/payara-172/glassfish/bin/asadmin --port 6048 create-jvm-options -Xmx2048m Alternative: You can edit the settings directly in the domain.xml in the config directory of the SORMAS domain. Just search for Xmx - there should be two entries that need to be changed.","title":"Problem: Server is out of memory"},{"location":"SERVER_UPDATE/","text":"Updating a SORMAS Server SORMAS releases starting from 1.21.0 contain a script that automatically updates and deploys the server. If you are using an older version and therefore need to do a manual server update, please download the 1.21.0 release files and use the commands specified in the server-update.sh script. Preparations Note: You can skip this step if you've just set up your SORMAS server and have already downloaded the latest release. Get the latest release files (deploy.zip) from https://github.com/hzi-braunschweig/SORMAS-Open/releases/latest Unzip the archive and copy/upload its contents to /root/deploy/sormas/$(date +%F) cd /root/deploy/sormas SORMAS_VERSION=1.y.z wget https://github.com/hzi-braunschweig/SORMAS-Project/releases/download/v${SORMAS_VERSION}/sormas_${SORMAS_VERSION}.zip unzip sormas_${SORMAS_VERSION}.zip mv deploy/ $(date +%F) rm sormas_${SORMAS_VERSION}.zip Automatic Server Update Navigate to the folder containing the unzipped deploy files: cd /root/deploy/sormas/$(date +%F) Make the update script executable: chmod +x server-update.sh Optional: Open server-update.sh in a text editor to customize the values for e.g. the domain path or the database name. You only need to do this if you used custom values while setting up the server. Execute the update script and follow the instructions: ./server-update.sh If anything goes wrong, open the latest update log file (by default located in the \"update-logs\" folder in the domain directory) and check it for errors. Restoring the Database If anything goes wrong during the automatic database update process when deploying the server, you can use the following command to restore the data: pg_restore --clean -U postgres -Fc -d sormas_db sormas_db_....dump Default Logins These are the default users for most user roles, intended to be used on development or demo systems. In all cases except the admin user, the username and password are identical. Make sure to deactivate them or change the passwords on productive systems. Admin Username: admin Password: sadmin Web users Surveillance Supervisor: SurvSup Case Supervisor: CaseSup Contact Supervisor: ContSup Point of Entry Supervisor: PoeSup Laboratory Officer: LabOff Event Officer: EveOff National User: NatUser National Clinician: NatClin Mobile app users Surveillance Officer: SurvOff Hospital Informant: HospInf Point of Entry Informant: PoeInf","title":"Updating a SORMAS Server"},{"location":"SERVER_UPDATE/#updating-a-sormas-server","text":"SORMAS releases starting from 1.21.0 contain a script that automatically updates and deploys the server. If you are using an older version and therefore need to do a manual server update, please download the 1.21.0 release files and use the commands specified in the server-update.sh script.","title":"Updating a SORMAS Server"},{"location":"SERVER_UPDATE/#preparations","text":"Note: You can skip this step if you've just set up your SORMAS server and have already downloaded the latest release. Get the latest release files (deploy.zip) from https://github.com/hzi-braunschweig/SORMAS-Open/releases/latest Unzip the archive and copy/upload its contents to /root/deploy/sormas/$(date +%F) cd /root/deploy/sormas SORMAS_VERSION=1.y.z wget https://github.com/hzi-braunschweig/SORMAS-Project/releases/download/v${SORMAS_VERSION}/sormas_${SORMAS_VERSION}.zip unzip sormas_${SORMAS_VERSION}.zip mv deploy/ $(date +%F) rm sormas_${SORMAS_VERSION}.zip","title":"Preparations"},{"location":"SERVER_UPDATE/#automatic-server-update","text":"Navigate to the folder containing the unzipped deploy files: cd /root/deploy/sormas/$(date +%F) Make the update script executable: chmod +x server-update.sh Optional: Open server-update.sh in a text editor to customize the values for e.g. the domain path or the database name. You only need to do this if you used custom values while setting up the server. Execute the update script and follow the instructions: ./server-update.sh If anything goes wrong, open the latest update log file (by default located in the \"update-logs\" folder in the domain directory) and check it for errors.","title":"Automatic Server Update"},{"location":"SERVER_UPDATE/#restoring-the-database","text":"If anything goes wrong during the automatic database update process when deploying the server, you can use the following command to restore the data: pg_restore --clean -U postgres -Fc -d sormas_db sormas_db_....dump","title":"Restoring the Database"},{"location":"SERVER_UPDATE/#default-logins","text":"These are the default users for most user roles, intended to be used on development or demo systems. In all cases except the admin user, the username and password are identical. Make sure to deactivate them or change the passwords on productive systems.","title":"Default Logins"},{"location":"SERVER_UPDATE/#admin","text":"Username: admin Password: sadmin","title":"Admin"},{"location":"SERVER_UPDATE/#web-users","text":"Surveillance Supervisor: SurvSup Case Supervisor: CaseSup Contact Supervisor: ContSup Point of Entry Supervisor: PoeSup Laboratory Officer: LabOff Event Officer: EveOff National User: NatUser National Clinician: NatClin","title":"Web users"},{"location":"SERVER_UPDATE/#mobile-app-users","text":"Surveillance Officer: SurvOff Hospital Informant: HospInf Point of Entry Informant: PoeInf","title":"Mobile app users"},{"location":"SOP_DISEASES/","text":"SOP for Adding New Diseases to SORMAS This file defines the SOP (Standard Operating Procedure) that should be followed when requesting new diseases to be added to the system by the core development team. Answering all the questions asked in this guide will make sure that we will be able to integrate new diseases into SORMAS as quickly as possible. Content Download the Data Dictionary Define Basic Disease Details Define Existing Case Fields Define Existing Person Fields Define the Relevant Symptoms Define the Relevant Epidemiological Data Define Health Conditions Define New Fields in Other Areas Provide Case Classification Criteria Provide Additional Information Send Your Disease Definition to the SORMAS Developers Guide Step 1: Download the Data Dictionary Download the latest Data Dictionary from this repository and open it. Please never use a version of the Data Dictionary that you downloaded earlier as it is very likely that its contents have changed in the meantime. You will use the Data Dictionary to define all the details of the new disease. Please make sure to mark every addition or change (e.g. by colorizing the text or background of the row in a subtle red) so we don't miss any of the information you have provided. Step 2: Define Basic Disease Details Open the Case tab of the Data Dictionary and scroll down to the tables that have a blue background. These tables define enumerations , which are basically data types with fixed values. Examples include the different case classifications, the gender of a person or the diseases that are used in SORMAS. Find the Disease enumeration table (refer to the Type column) and add a new row to it. Enter the following details: The name of the disease in the Caption column Optionally, if the disease has a long name, a short name or abbreviation in the Short column Use the Description column to answer the following question(s): Does the disease have contact follow-up ? If yes, for how many days should contact follow-up be done? Step 3: Define Existing Case Fields Look through the rows in the first table of the Case tab (which has a grey background). This table defines all the fields that are displayed in the Case Information tab in the SORMAS application. The Caption column defines the name of the field as it is displayed in the user interface, while the Diseases column specifies which diseases use this field. Please add the name (or, if available, short name) of your new disease to the \"New disease\" column of every row that represents a field that is relevant for it and colorize it. Step 4: Define Existing Person Fields Open the Person tab and repeat step 3 for the first table containing the fields that define the details of a person in SORMAS. Step 5: Define the Relevant Symptoms Open the Symptoms tab which lists all the symptoms that are currently used in SORMAS. This is a very long list and you will have to go through every single row and define whether this symptom should be tracked for your new disease or not. It's possible that your new disease uses one or more symptoms that are currently not part of SORMAS. In that case, you need to add a new row for each of these symptoms to the bottom of the table and provide the name of the symptom in the Caption column. Most symptoms in SORMAS are simple Yes/No/Unknown fields where Yes means that the symptom is present, No that the symptom is not present and Unknown that there is no information about whether the symptom is present or not. If your symptom can simply be defined by this pattern, you don't have to specify anything else. However, if your symptom is more complex (e.g. there are a number of pre-defined values that the user should choose from), please provide all the necessary details about how the symptom should be specified by users in the Description column. Step 6: Define the Relevant Epidemiological Data Open the Epidemiological data tab which lists all fields that are used to collect information about the epidemiological background of the case, e.g. whether they visited burials, had contact with a confirmed case or animals. Repeat step 3 for all rows in the first table, and add new rows if your new disease requires information that is not currently collected within SORMAS. As new fields in this tab are likely to be more complex than basic symptoms, make sure to define as much information about how they should function in the Description column. Step 7: Define Health Conditions Open the Health conditions tab which contains a list of pre-existing conditions that are not symptoms of the disease, but are still relevant especially for case management purposes in a hospital. Repeat step 3 for all rows in the first table, and add new rows if there are health conditions relevant for your new disease that are not part of SORMAS yet. As always with new fields, make sure to provide all relevant details in the Description column. Step 8: Define New Fields in Other Areas It is possible that your disease requires further information to be collected that is not supported by SORMAS yet, e.g. new details about the person, specific information about its hospitalization, or even very important fields that should directly go into the case information. You can use the same process you used to define new symptoms, health conditions or epidemiological data fields by opening the tab in question and adding new rows to the topmost table. At this point, you have finished all the necessary definitions in the Data Dictionary. Save your work and prepare an email with the Data Dictionary file attached to it. Don't send this email before working through the remaining steps though, as there are still a few details that are needed in order to finish the specification of your new disease. Step 9: Provide Case Classification Criteria Optimally, when defining a new disease, you should also specify the criteria SORMAS should use to automatically classify the case as suspect, probable or confirmed. In order to do this in a way that is compatible with the system we use, you will need access to a running SORMAS system (e.g. the play server you can find at https://sormas.org). Log in as any user (e.g. the default user on the play server), open the About section from the main menu, and open the Case Classification Rules (HTML) document. Please define the classification criteria in a way that is similar to the system used in this document. If available, you can also send us an official document by WHO or your national CDC that specifies the classification criteria. Step 10: Provide Additional Information If there are still things that are necessary in order to properly implement the new disease in SORMAS (you might require us to create a whole new area for cases or there might be very complex mechanics that need a lot more specification), please give us as many details about them as possible. Just put all this information into your email. Step 11: Send Your Disease Definition to the SORMAS Team Send your email containing the updated Data Dictionary file, the case classification criteria and your additional notes to sormas@helmholtz-hzi.de. Congratulations, your work is done! We should now have all the information we need in order to integrate your disease into SORMAS. If there is anything that is unclear or if we need additional details, we will get in touch with you as soon as possible. Thank you so much for contributing to SORMAS and helping us to fight the spread of as many diseases as possible!","title":"SOP for Adding New Diseases to SORMAS"},{"location":"SOP_DISEASES/#sop-for-adding-new-diseases-to-sormas","text":"This file defines the SOP (Standard Operating Procedure) that should be followed when requesting new diseases to be added to the system by the core development team. Answering all the questions asked in this guide will make sure that we will be able to integrate new diseases into SORMAS as quickly as possible.","title":"SOP for Adding New Diseases to SORMAS"},{"location":"SOP_DISEASES/#content","text":"Download the Data Dictionary Define Basic Disease Details Define Existing Case Fields Define Existing Person Fields Define the Relevant Symptoms Define the Relevant Epidemiological Data Define Health Conditions Define New Fields in Other Areas Provide Case Classification Criteria Provide Additional Information Send Your Disease Definition to the SORMAS Developers","title":"Content"},{"location":"SOP_DISEASES/#guide","text":"","title":"Guide"},{"location":"SOP_DISEASES/#step-1-download-the-data-dictionary","text":"Download the latest Data Dictionary from this repository and open it. Please never use a version of the Data Dictionary that you downloaded earlier as it is very likely that its contents have changed in the meantime. You will use the Data Dictionary to define all the details of the new disease. Please make sure to mark every addition or change (e.g. by colorizing the text or background of the row in a subtle red) so we don't miss any of the information you have provided.","title":"Step 1: Download the Data Dictionary"},{"location":"SOP_DISEASES/#step-2-define-basic-disease-details","text":"Open the Case tab of the Data Dictionary and scroll down to the tables that have a blue background. These tables define enumerations , which are basically data types with fixed values. Examples include the different case classifications, the gender of a person or the diseases that are used in SORMAS. Find the Disease enumeration table (refer to the Type column) and add a new row to it. Enter the following details: The name of the disease in the Caption column Optionally, if the disease has a long name, a short name or abbreviation in the Short column Use the Description column to answer the following question(s): Does the disease have contact follow-up ? If yes, for how many days should contact follow-up be done?","title":"Step 2: Define Basic Disease Details"},{"location":"SOP_DISEASES/#step-3-define-existing-case-fields","text":"Look through the rows in the first table of the Case tab (which has a grey background). This table defines all the fields that are displayed in the Case Information tab in the SORMAS application. The Caption column defines the name of the field as it is displayed in the user interface, while the Diseases column specifies which diseases use this field. Please add the name (or, if available, short name) of your new disease to the \"New disease\" column of every row that represents a field that is relevant for it and colorize it.","title":"Step 3: Define Existing Case Fields"},{"location":"SOP_DISEASES/#step-4-define-existing-person-fields","text":"Open the Person tab and repeat step 3 for the first table containing the fields that define the details of a person in SORMAS.","title":"Step 4: Define Existing Person Fields"},{"location":"SOP_DISEASES/#step-5-define-the-relevant-symptoms","text":"Open the Symptoms tab which lists all the symptoms that are currently used in SORMAS. This is a very long list and you will have to go through every single row and define whether this symptom should be tracked for your new disease or not. It's possible that your new disease uses one or more symptoms that are currently not part of SORMAS. In that case, you need to add a new row for each of these symptoms to the bottom of the table and provide the name of the symptom in the Caption column. Most symptoms in SORMAS are simple Yes/No/Unknown fields where Yes means that the symptom is present, No that the symptom is not present and Unknown that there is no information about whether the symptom is present or not. If your symptom can simply be defined by this pattern, you don't have to specify anything else. However, if your symptom is more complex (e.g. there are a number of pre-defined values that the user should choose from), please provide all the necessary details about how the symptom should be specified by users in the Description column.","title":"Step 5: Define the Relevant Symptoms"},{"location":"SOP_DISEASES/#step-6-define-the-relevant-epidemiological-data","text":"Open the Epidemiological data tab which lists all fields that are used to collect information about the epidemiological background of the case, e.g. whether they visited burials, had contact with a confirmed case or animals. Repeat step 3 for all rows in the first table, and add new rows if your new disease requires information that is not currently collected within SORMAS. As new fields in this tab are likely to be more complex than basic symptoms, make sure to define as much information about how they should function in the Description column.","title":"Step 6: Define the Relevant Epidemiological Data"},{"location":"SOP_DISEASES/#step-7-define-health-conditions","text":"Open the Health conditions tab which contains a list of pre-existing conditions that are not symptoms of the disease, but are still relevant especially for case management purposes in a hospital. Repeat step 3 for all rows in the first table, and add new rows if there are health conditions relevant for your new disease that are not part of SORMAS yet. As always with new fields, make sure to provide all relevant details in the Description column.","title":"Step 7: Define Health Conditions"},{"location":"SOP_DISEASES/#step-8-define-new-fields-in-other-areas","text":"It is possible that your disease requires further information to be collected that is not supported by SORMAS yet, e.g. new details about the person, specific information about its hospitalization, or even very important fields that should directly go into the case information. You can use the same process you used to define new symptoms, health conditions or epidemiological data fields by opening the tab in question and adding new rows to the topmost table. At this point, you have finished all the necessary definitions in the Data Dictionary. Save your work and prepare an email with the Data Dictionary file attached to it. Don't send this email before working through the remaining steps though, as there are still a few details that are needed in order to finish the specification of your new disease.","title":"Step 8: Define New Fields in Other Areas"},{"location":"SOP_DISEASES/#step-9-provide-case-classification-criteria","text":"Optimally, when defining a new disease, you should also specify the criteria SORMAS should use to automatically classify the case as suspect, probable or confirmed. In order to do this in a way that is compatible with the system we use, you will need access to a running SORMAS system (e.g. the play server you can find at https://sormas.org). Log in as any user (e.g. the default user on the play server), open the About section from the main menu, and open the Case Classification Rules (HTML) document. Please define the classification criteria in a way that is similar to the system used in this document. If available, you can also send us an official document by WHO or your national CDC that specifies the classification criteria.","title":"Step 9: Provide Case Classification Criteria"},{"location":"SOP_DISEASES/#step-10-provide-additional-information","text":"If there are still things that are necessary in order to properly implement the new disease in SORMAS (you might require us to create a whole new area for cases or there might be very complex mechanics that need a lot more specification), please give us as many details about them as possible. Just put all this information into your email.","title":"Step 10: Provide Additional Information"},{"location":"SOP_DISEASES/#step-11-send-your-disease-definition-to-the-sormas-team","text":"Send your email containing the updated Data Dictionary file, the case classification criteria and your additional notes to sormas@helmholtz-hzi.de. Congratulations, your work is done! We should now have all the information we need in order to integrate your disease into SORMAS. If there is anything that is unclear or if we need additional details, we will get in touch with you as soon as possible. Thank you so much for contributing to SORMAS and helping us to fight the spread of as many diseases as possible!","title":"Step 11: Send Your Disease Definition to the SORMAS Team"}]}